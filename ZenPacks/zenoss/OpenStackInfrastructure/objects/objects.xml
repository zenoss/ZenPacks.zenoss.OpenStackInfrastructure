<?xml version="1.0"?>
<objects>
<!-- ('', 'zport', 'dmd', 'Events', 'OpenStack') -->
<object id='/zport/dmd/Events/OpenStack' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='OpenStack Events Default' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
999
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|')
</property>
<property type="string" id="example" mode="w" >
openstack|compute.instance.create.start
</property>
<property type="text" id="explanation" mode="w" >
Default event transform for all OpenStack Ceilometer notifications.  Maps to /OpenStack, history.
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
<object id='compute' module='Products.ZenEvents.EventClass' class='EventClass'>
<object id='instance' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='compute.instance default mapping' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
59
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|compute.instance.')
</property>
<property type="text" id="explanation" mode="w" >
All compute.instance events not otherwise mapped will be placed in the /OpenStackInfrastructure/compute/instance class history.
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
<object id='compute.instance.create.error' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="string" id="eventClassKey" mode="w" >
openstack|compute.instance.create.error
</property>
<property type="int" id="sequence" mode="w" >
51
</property>
<property type="text" id="explanation" mode="w" >
An error has occurred while creating an instance
</property>
<property visible="True" type="int" id="zEventSeverity" >
4
</property>
</object>
<object id='compute.instance.exists' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="string" id="eventClassKey" mode="w" >
openstack|compute.instance.exists
</property>
<property type="int" id="sequence" mode="w" >
52
</property>
<property type="text" id="explanation" mode="w" >
Drop compute.instance.exists events, not worth storing in event history.
</property>
<property visible="True" type="string" id="zEventAction" >
drop
</property>
</object>
<object id='compute.instance.exists.verified.old' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="string" id="eventClassKey" mode="w" >
openstack|compute.instance.exists.verified.old
</property>
<property type="int" id="sequence" mode="w" >
53
</property>
<property type="text" id="explanation" mode="w" >
Drop compute.instance.exists.verified.old events, not worth storing in event history.
</property>
<property visible="True" type="string" id="zEventAction" >
drop
</property>
</object>
</tomanycont>
</object>
</object>
<object id='dhcp_agent' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='dhcp_agent defaultmapping' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
100
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|dhcp_agent.')
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
<object id='firewall' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='firewall defaultmapping' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
200
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|firewall.')
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
<object id='firewall_policy' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='firewall_policy defaultmapping' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
210
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|firewall_policy.')
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
<object id='firewall_rule' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='firewall_rule defaultmapping' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
220
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|firewall_rule.')
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
<object id='floatingip' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='floatingip defaultmapping' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
300
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|floatingip.')
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
<object id='network' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='network defaultmapping' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
400
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|network.')
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
<object id='port' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='port defaultmapping' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
500
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|port.')
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
<object id='router' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='router defaultmapping' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
600
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|router')
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
<object id='security_group' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='security_group defaultmapping' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
700
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|security_group.')
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
<object id='security_group_rule' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='security_group_rule defaultmapping' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
710
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|security_group_rule.')
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
<object id='subnet' module='Products.ZenEvents.EventClass' class='EventClass'>
<tomanycont id='instances'>
<object id='subnet defaultmapping' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="text" id="transform" mode="w" >
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w" >
defaultmapping
</property>
<property type="int" id="sequence" mode="w" >
800
</property>
<property type="string" id="rule" mode="w" >
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|subnet.')
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
<object id="Cinder" module="Products.ZenEvents.EventClass" class="EventClass">
<object id="Volume" module="Products.ZenEvents.EventClass" class="EventClass">
<tomanycont id="instances">
<object id="cinder.volume default mapping" module="Products.ZenEvents.EventClassInst" class="EventClassInst">
<property type="text" id="transform" mode="w">
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w">
defaultmapping
</property>
<property type="int" id="sequence" mode="w">
900
</property>
<property type="string" id="rule" mode="w">
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|volume')
</property>
<property type="text" id="explanation" mode="w">
All volume events not otherwise mapped will be placed in the /OpenStackInfrastructure/Cinder/Volume class history.
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
<object id="Snapshot" module="Products.ZenEvents.EventClass" class="EventClass">
<tomanycont id="instances">
<object id="Cinder Snapshot default mapping" module="Products.ZenEvents.EventClassInst" class="EventClassInst">
<property type="text" id="transform" mode="w">
from ZenPacks.zenoss.OpenStackInfrastructure.events import process
process(evt, device, dmd, txnCommit)
</property>
<property type="string" id="eventClassKey" mode="w">
defaultmapping
</property>
<property type="int" id="sequence" mode="w">
900
</property>
<property type="string" id="rule" mode="w">
(getattr(evt, 'eventClassKey', '') or '').startswith('openstack|snapshot')
</property>
<property type="text" id="explanation" mode="w">
All snapshot events not otherwise mapped will be placed in the /OpenStackInfrastructure/Cinder/Snapshot class history.
</property>
<property visible="True" type="string" id="zEventAction" >
history
</property>
</object>
</tomanycont>
</object>
</object>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'Heartbeat', 'instances', 'openStackCeilometerHeartbeat') -->
<object id='/zport/dmd/Events/Status/Heartbeat/instances/openStackCeilometerHeartbeat' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="string" id="eventClassKey" mode="w" >
openStackCeilometerHeartbeat
</property>
<property type="int" id="sequence" mode="w" >
10
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'instances', 'openStackIniFileAccess') -->
<object id='/zport/dmd/Events/Status/instances/openStackIniFileAccess' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="string" id="eventClassKey" mode="w" >
openStackIniFileAccess
</property>
<property type="int" id="sequence" mode="w" >
12
</property>
<property type="text" id="explanation" mode="w" >
An openstack configuration file could not be accessed.
</property>
<property type="text" id="resolution" mode="w" >
Correct the permissions so that the file is accessible.
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'instances', 'openStackIniFileOptionParsing') -->
<object id='/zport/dmd/Events/Status/instances/openStackIniFileOptionParsing' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="string" id="eventClassKey" mode="w" >
openStackIniFileOptionParsing
</property>
<property type="int" id="sequence" mode="w" >
12
</property>
<property type="text" id="explanation" mode="w" >
A required option was not found in an ini file on the openstack host.
</property>
<property type="text" id="resolution" mode="w" >
Add the required option to the file.
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'instances', 'openStackNeutronAgentStatus') -->
<object id='/zport/dmd/Events/Status/instances/openStackNeutronAgentStatus' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="string" id="eventClassKey" mode="w" >
openStackNeutronAgentStatus
</property>
<property type="int" id="sequence" mode="w" >
12
</property>
<property type="text" id="explanation" mode="w" >
A neutron agent is not running properly
</property>
<property type="text" id="resolution" mode="w" >
Restart the offending agent.
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'instances', 'openStackCinderServiceStatus') -->
<object id='/zport/dmd/Events/Status/instances/openStackCinderServiceStatus' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="string" id="eventClassKey" mode="w" >
openStackCinderServiceStatus
</property>
<property type="int" id="sequence" mode="w" >
12
</property>
<property type="text" id="explanation" mode="w" >
A cinder agent is not running properly
</property>
<property type="text" id="resolution" mode="w" >
Restart the offending agent.
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'instances', 'openStackApiEndpointStatus') -->
<object id='/zport/dmd/Events/Status/instances/openStackApiEndpointStatus' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="string" id="eventClassKey" mode="w">
openStackApiEndpointStatus
</property>
<property type="int" id="sequence" mode="w">
12
</property>
<property type="text" id="explanation" mode="w">
An openstack API endpoint is not responding to http queries.
</property>
<property type="text" id="resolution" mode="w">
Troubleshoot or restart the responsible process.
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Events', 'Status', 'instances', 'openStackNovaServiceStatus') -->
<object id='/zport/dmd/Events/Status/instances/openStackNovaServiceStatus' module='Products.ZenEvents.EventClassInst' class='EventClassInst'>
<property type="string" id="eventClassKey" mode="w" >
openStackNovaServiceStatus
</property>
<property type="int" id="sequence" mode="w" >
12
</property>
<property type="text" id="explanation" mode="w" >
A nova service is not running properly
</property>
<property type="text" id="resolution" mode="w" >
Restart the offending service.
</property>
</object>
<!-- ('', 'zport', 'dmd', 'Manufacturers', 'OpenStack') -->
<object id='/zport/dmd/Manufacturers/OpenStack' module='Products.ZenModel.Manufacturer' class='Manufacturer'>
<property type="string" id="url" mode="w" >
http://www.openstack.org/
</property>
<property type="string" id="zip" mode="w" >
</property>
<property type="lines" id="regexes" mode="w" >
[]
</property>
<tomanycont id='products'>
<object id='Havana (2013.2)' module='Products.ZenModel.SoftwareClass' class='SoftwareClass'>
<property type="string" id="name" mode="w" >
Havana (2013.2)
</property>
<property type="lines" id="productKeys" mode="w" >
['2013.2.1', '2013.2.2', '2013.2.3', '2013.2.4', '2013.2.5', '2013.2.6', '2013.2.7', '2013.2.8', '2013.2.9', '2013.2.10']
</property>
<property type="boolean" id="isOS" mode="w" >
True
</property>
</object>
<object id='Icehouse (2014.1)' module='Products.ZenModel.SoftwareClass' class='SoftwareClass'>
<property type="string" id="name" mode="w" >
Icehouse (2014.1)
</property>
<property type="lines" id="productKeys" mode="w" >
['2014.1.1', '2014.1.2', '2014.1.3', '2014.1.4', '2014.1.5', '2014.1.6', '2014.1.7', '2014.1.8', '2014.1.9', '2014.1.10']
</property>
<property type="boolean" id="isOS" mode="w" >
True
</property>
</object>
<object id='Juno (2014.2)' module='Products.ZenModel.SoftwareClass' class='SoftwareClass'>
<property type="string" id="name" mode="w" >
Juno (2014.2)
</property>
<property type="lines" id="productKeys" mode="w" >
['2014.2.1', '2014.2.2', '2014.2.3', '2014.2.4', '2014.2.5', '2014.2.6', '2014.2.7', '2014.2.8', '2014.2.9', '2014.2.10']
</property>
<property type="boolean" id="isOS" mode="w" >
True
</property>
</object>
<object id='Kilo (2015.1)' module='Products.ZenModel.SoftwareClass' class='SoftwareClass'>
<property type="string" id="name" mode="w" >
Kilo (2015.1)
</property>
<property type="lines" id="productKeys" mode="w" >
['2015.1.1', '2015.1.2', '2015.1.3', '2015.1.4', '2015.1.5', '2015.1.6', '2015.1.7', '2015.1.8', '2015.1.9', '2015.1.10']
</property>
<property type="boolean" id="isOS" mode="w" >
True
</property>
</object>
<object id='Liberty (2015.2)' module='Products.ZenModel.SoftwareClass' class='SoftwareClass'>
<property type="string" id="name" mode="w" >
Liberty (2015.2)
</property>
<property type="lines" id="productKeys" mode="w" >
['2015.2.1', '2015.2.2', '2015.2.3', '2015.2.4', '2015.2.5', '2015.2.6', '2015.2.7', '2015.2.8', '2015.2.9', '2015.2.10']
</property>
<property type="boolean" id="isOS" mode="w" >
True
</property>
</object>
<object id='Mitaka (2016.1)' module='Products.ZenModel.SoftwareClass' class='SoftwareClass'>
<property type="string" id="name" mode="w" >
Mitaka (2016.1)
</property>
<property type="lines" id="productKeys" mode="w" >
['2016.1.1', '2016.1.2', '2016.1.3', '2016.1.4', '2016.1.5', '2016.1.6', '2016.1.7', '2016.1.8', '2016.1.9', '2016.1.10']
</property>
<property type="boolean" id="isOS" mode="w" >
True
</property>
</object>
</tomanycont>
</object>
<!-- ('', 'zport', 'dmd', 'Processes', 'OpenStack') -->
<object id='/zport/dmd/Processes/OpenStack' module='Products.ZenModel.OSProcessOrganizer' class='OSProcessOrganizer'>
<property visible="True" type="int" id="zModelerLock" >
1
</property>
<tomanycont id='osProcessClasses'>
<object id='ceilometer-agent-central' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
ceilometer-agent-central
</property>
<property type="string" id="regex" mode="w" >
ceilometer-agent-central
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
1
</property>
</object>
<object id='ceilometer-agent-compute' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
ceilometer-agent-compute
</property>
<property type="string" id="regex" mode="w" >
ceilometer-agent-compute
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
2
</property>
</object>
<object id='ceilometer-agent-notification' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
ceilometer-agent-notification
</property>
<property type="string" id="regex" mode="w" >
ceilometer-agent-notification
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
3
</property>
</object>
<object id='ceilometer-alarm-evaluator' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
ceilometer-alarm-evaluator
</property>
<property type="string" id="regex" mode="w" >
ceilometer-alarm-evaluator
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
4
</property>
</object>
<object id='ceilometer-alarm-notifier' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
ceilometer-alarm-notifier
</property>
<property type="string" id="regex" mode="w" >
ceilometer-alarm-notifier
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
5
</property>
</object>
<object id='ceilometer-api' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
ceilometer-api
</property>
<property type="string" id="regex" mode="w" >
ceilometer-api
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
6
</property>
</object>
<object id='ceilometer-collector' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
ceilometer-collector
</property>
<property type="string" id="regex" mode="w" >
ceilometer-collector
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
7
</property>
</object>
<object id='ceilometer-polling' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
ceilometer-polling
</property>
<property type="string" id="regex" mode="w" >
ceilometer-polling
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
3
</property>
</object>
<object id='neutron-dhcp-agent' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
neutron-dhcp-agent
</property>
<property type="string" id="regex" mode="w" >
neutron-dhcp-agent
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
0
</property>
</object>
<object id='neutron-l3-agent' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
neutron-l3-agent
</property>
<property type="string" id="regex" mode="w" >
neutron-l3-agent
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
0
</property>
</object>
<object id='neutron-metadata-agent' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
neutron-metadata-agent
</property>
<property type="string" id="regex" mode="w" >
neutron-metadata-agent
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
0
</property>
</object>
<object id='neutron-openvswitch-agent' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
neutron-openvswitch-agent
</property>
<property type="string" id="regex" mode="w" >
neutron-openvswitch-agent
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
0
</property>
</object>
<object id='neutron-server' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
neutron-server
</property>
<property type="string" id="regex" mode="w" >
neutron-server
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|pgrep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
0
</property>
</object>
<object id='nova-api' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
nova-api
</property>
<property type="string" id="regex" mode="w" >
nova-api
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
15
</property>
</object>
<object id='nova-cert' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
nova-cert
</property>
<property type="string" id="regex" mode="w" >
nova-cert
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
8
</property>
</object>
<object id='nova-compute' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
nova-compute
</property>
<property type="string" id="regex" mode="w" >
nova-compute
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
13
</property>
</object>
<object id='nova-conductor' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
nova-conductor
</property>
<property type="string" id="regex" mode="w" >
nova-conductor
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
9
</property>
</object>
<object id='nova-consoleauth' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
nova-consoleauth
</property>
<property type="string" id="regex" mode="w" >
nova-consoleauth
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
10
</property>
</object>
<object id='nova-network' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
nova-network
</property>
<property type="string" id="regex" mode="w" >
nova-network
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
11
</property>
</object>
<object id='nova-scheduler' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
nova-scheduler
</property>
<property type="string" id="regex" mode="w" >
nova-scheduler
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
12
</property>
</object>
<object id="cinder-api" module="Products.ZenModel.OSProcessClass" class="OSProcessClass">
<property type="string" id="name" mode="w">
cinder-api
</property>
<property type="string" id="regex" mode="w">
cinder-api
</property>
<property type="string" id="excludeRegex" mode="w">
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w">
False
</property>
<property type="boolean" id="ignoreParameters" mode="w">
False
</property>
<property type="int" id="sequence" mode="w">
12
</property>
</object>
<object id="cinder-scheduler" module="Products.ZenModel.OSProcessClass" class="OSProcessClass">
<property type="string" id="name" mode="w">
cinder-scheduler
</property>
<property type="string" id="regex" mode="w">
cinder-scheduler
</property>
<property type="string" id="excludeRegex" mode="w">
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w">
False
</property>
<property type="boolean" id="ignoreParameters" mode="w">
False
</property>
<property type="int" id="sequence" mode="w">
12
</property>
</object>
<object id="cinder-volume" module="Products.ZenModel.OSProcessClass" class="OSProcessClass">
<property type="string" id="name" mode="w">
cinder-volume
</property>
<property type="string" id="regex" mode="w">
cinder-volume
</property>
<property type="string" id="excludeRegex" mode="w">
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w">
False
</property>
<property type="boolean" id="ignoreParameters" mode="w">
False
</property>
<property type="int" id="sequence" mode="w">
12
</property>
</object>
<object id="cinder-backup" module="Products.ZenModel.OSProcessClass" class="OSProcessClass">
<property type="string" id="name" mode="w">
cinder-backup
</property>
<property type="string" id="regex" mode="w">
cinder-backup
</property>
<property type="string" id="excludeRegex" mode="w">
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w">
False
</property>
<property type="boolean" id="ignoreParameters" mode="w">
False
</property>
<property type="int" id="sequence" mode="w">
12
</property>
</object>
<object id="glance-api" module="Products.ZenModel.OSProcessClass" class="OSProcessClass">
<property type="string" id="name" mode="w">
glance-api
</property>
<property type="string" id="regex" mode="w">
glance-api
</property>
<property type="string" id="excludeRegex" mode="w">
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w">
False
</property>
<property type="boolean" id="ignoreParameters" mode="w">
False
</property>
<property type="int" id="sequence" mode="w">
12
</property>
</object>
<object id="glance-registry" module="Products.ZenModel.OSProcessClass" class="OSProcessClass">
<property type="string" id="name" mode="w">
glance-registry
</property>
<property type="string" id="regex" mode="w">
glance-registry
</property>
<property type="string" id="excludeRegex" mode="w">
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w">
False
</property>
<property type="boolean" id="ignoreParameters" mode="w">
False
</property>
<property type="int" id="sequence" mode="w">
12
</property>
</object>
<object id="gnocchi-metricd" module="Products.ZenModel.OSProcessClass" class="OSProcessClass">
<property type="string" id="name" mode="w">
gnocchi-metricd
</property>
<property type="string" id="regex" mode="w">
gnocchi-metricd
</property>
<property type="string" id="excludeRegex" mode="w">
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w">
False
</property>
<property type="boolean" id="ignoreParameters" mode="w">
False
</property>
<property type="int" id="sequence" mode="w">
12
</property>
</object>
<object id="gnocchi-statsd" module="Products.ZenModel.OSProcessClass" class="OSProcessClass">
<property type="string" id="name" mode="w">
gnocchi-statsd
</property>
<property type="string" id="regex" mode="w">
gnocchi-statsd
</property>
<property type="string" id="excludeRegex" mode="w">
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w">
False
</property>
<property type="boolean" id="ignoreParameters" mode="w">
False
</property>
<property type="int" id="sequence" mode="w">
12
</property>
</object>
<object id="keystone-all" module="Products.ZenModel.OSProcessClass" class="OSProcessClass">
<property type="string" id="name" mode="w">
keystone-all
</property>
<property type="string" id="regex" mode="w">
keystone-all
</property>
<property type="string" id="excludeRegex" mode="w">
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w">
False
</property>
<property type="boolean" id="ignoreParameters" mode="w">
False
</property>
<property type="int" id="sequence" mode="w">
12
</property>
</object>
<object id="keystone-admin" module="Products.ZenModel.OSProcessClass" class="OSProcessClass">
<property type="string" id="name" mode="w">
keystone-admin
</property>
<property type="string" id="regex" mode="w">
keystone-admin
</property>
<property type="string" id="excludeRegex" mode="w">
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w">
False
</property>
<property type="boolean" id="ignoreParameters" mode="w">
False
</property>
<property type="int" id="sequence" mode="w">
12
</property>
</object>
<object id="keystone-main" module="Products.ZenModel.OSProcessClass" class="OSProcessClass">
<property type="string" id="name" mode="w">
keystone-main
</property>
<property type="string" id="regex" mode="w">
keystone-main
</property>
<property type="string" id="excludeRegex" mode="w">
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w">
False
</property>
<property type="boolean" id="ignoreParameters" mode="w">
False
</property>
<property type="int" id="sequence" mode="w">
12
</property>
</object>
<object id="rabbitmq-server" module="Products.ZenModel.OSProcessClass" class="OSProcessClass">
<property type="string" id="name" mode="w">
rabbitmq-server
</property>
<property type="string" id="regex" mode="w">
rabbitmq-server
</property>
<property type="string" id="excludeRegex" mode="w">
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w">
False
</property>
<property type="boolean" id="ignoreParameters" mode="w">
False
</property>
<property type="int" id="sequence" mode="w">
12
</property>
</object>
<object id='neutron-lbaas-agent' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
neutron-lbaas-agent
</property>
<property type="string" id="regex" mode="w" >
neutron-lbaas-agent
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
0
</property>
</object>
<object id='neutron-metering-agent' module='Products.ZenModel.OSProcessClass' class='OSProcessClass'>
<property type="string" id="name" mode="w" >
neutron-metering-agent
</property>
<property type="string" id="regex" mode="w" >
neutron-metering-agent
</property>
<property type="string" id="excludeRegex" mode="w" >
\b(vim|tail|grep|tar|cat|bash)\b
</property>
<property type="boolean" id="ignoreParametersWhenModeling" mode="w" >
False
</property>
<property type="boolean" id="ignoreParameters" mode="w" >
False
</property>
<property type="int" id="sequence" mode="w" >
0
</property>
</object>
</tomanycont>
</object>
</objects>
