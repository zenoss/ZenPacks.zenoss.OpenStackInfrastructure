#!/usr/bin/env python

###########################################################################
#
# This program is part of Zenoss Core, an open source monitoring platform.
# Copyright (C) 2018, Zenoss Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 or (at your
# option) any later version as published by the Free Software Foundation.
#
# For complete information please visit: http://www.zenoss.com/oss/
#
###########################################################################

import os

import logging
logging.basicConfig(level=logging.INFO)
log = logging.getLogger('zen.OpenStackInfrastructure')
from twisted.internet import defer

import Globals

from Products.DataCollector.ApplyDataMap import ApplyDataMap
from Products.ZenUtils.Utils import unused
from Products.ZenModel import Device

from ZenPacks.zenoss.OpenStackInfrastructure.tests.utils import SharedModelTestLayer, SharedModelTestCase, setup_crochet
from ZenPacks.zenoss.OpenStackInfrastructure import hostmap

unused(Globals)

crochet = setup_crochet()


class TestModelNFVINewtonFullLayer(SharedModelTestLayer):
    pass


class TestModelNFVINewtonFull(SharedModelTestCase):

    disableLogging = False
    layer = TestModelNFVINewtonFullLayer

    def tearDown(self):
        super(TestModelNFVINewtonFull, self).tearDown()

    def setUp(self):
        super(TestModelNFVINewtonFull, self).setUp()

        self.applyDataMap = ApplyDataMap()._applyDataMap

        if not self.device:
            json_filename = os.path.dirname(__file__) + "/data/model/nfvi_newton_full.json"
            self.createDevice('testmodelNFVINewtonFull', json_filename=json_filename)

        # from ZenPacks.zenoss.OpenStackInfrastructure.tests.utils import device_to_tests
        # print device_to_tests(self.device)
        # import pdb; pdb.set_trace()

    @crochet.wait_for(timeout=30)
    def _preprocessHosts(self, modeler, results):
        _real_resolve_names = hostmap.resolve_names
        _real_getHostByName = Device.getHostByName

        try:
            # Patch to remove DNS dependencies
            def getHostByName(name):
                return results['hostmap_dns'].get(name)

            def resolve_names(names):
                result = {}
                for name in names:
                    result[name] = results['hostmap_dns'].get(name)
                return defer.maybeDeferred(lambda: result)

            hostmap.resolve_names = resolve_names
            Device.getHostByName = getHostByName

            return modeler.preprocess_hosts(self.device, results)
        finally:
            Device.getHostByName = _real_getHostByName
            hostmap.resolve_names = _real_resolve_names

    def test_ApiEndpoint(self):
        component = self.device.getObjByPath('components/apiendpoint-zOpenStackAuthUrl')
        self.assertEquals(component.title, 'http://1.2.3.4:5000/v2.0')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.service_type, 'identity')
        self.assertEquals(component.source, 'zOpenStackAuthUrl')
        self.assertEquals(component.url, 'http://1.2.3.4:5000/v2.0')

    def test_AvailabilityZone(self):
        component = self.device.getObjByPath('components/zone-nova')
        self.assertEquals(component.title, 'nova')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.childOrgs())
        self.assertEquals(sorted([x.id for x in component.childOrgs()]), [])
        self.assertIsNotNone(component.hosts())
        self.assertEquals(sorted([x.id for x in component.hosts()]), ['host-nfvi-micropod-new-compute-1', 'host-nfvi-micropod-new-compute-2'])

        component = self.device.getObjByPath('components/zone-internal')
        self.assertEquals(component.title, 'internal')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.childOrgs())
        self.assertEquals(sorted([x.id for x in component.childOrgs()]), [])
        self.assertIsNotNone(component.hosts())
        self.assertEquals(sorted([x.id for x in component.hosts()]), ['host-nfvi-micropod-node-1', 'host-nfvi-micropod-node-2', 'host-nfvi-micropod-node-3'])

    def test_CinderService(self):
        component = self.device.getObjByPath('components/service-cinder-scheduler-nfvi-micropod-node-2-nova')
        self.assertEquals(component.title, 'cinder-scheduler@nfvi-micropod-node-2 (nova)')
        self.assertEquals(component.binary, 'cinder-scheduler')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-2')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/service-cinder-scheduler-nfvi-micropod-node-3-nova')
        self.assertEquals(component.title, 'cinder-scheduler@nfvi-micropod-node-3 (nova)')
        self.assertEquals(component.binary, 'cinder-scheduler')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-3')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/service-cinder-scheduler-nfvi-micropod-node-1-nova')
        self.assertEquals(component.title, 'cinder-scheduler@nfvi-micropod-node-1 (nova)')
        self.assertEquals(component.binary, 'cinder-scheduler')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-1')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/service-cinder-volume-nova')
        self.assertEquals(component.title, 'cinder-volume (nova)')
        self.assertEquals(component.binary, 'cinder-volume')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNone(component.hostedOn())
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

    def test_Flavor(self):
        component = self.device.getObjByPath('components/flavor-1578682c-f2e5-4b67-b6ef-bc1fb5348775')
        self.assertEquals(component.title, 'test-flavor1')
        self.assertEquals(component.flavorDisk, 12884901888)
        self.assertEquals(component.flavorId, '1578682c-f2e5-4b67-b6ef-bc1fb5348775')
        self.assertEquals(component.flavorRAM, 8489271296)
        self.assertEquals(component.flavorType, 'False')
        self.assertEquals(component.flavorVCPUs, 12)
        self.assertEquals(component.resourceId, None)

        component = self.device.getObjByPath('components/flavor-748db4bc-d171-457d-9e9d-1b4b42507de6')
        self.assertEquals(component.title, 'test-flavor2')
        self.assertEquals(component.flavorDisk, 12884901888)
        self.assertEquals(component.flavorId, '748db4bc-d171-457d-9e9d-1b4b42507de6')
        self.assertEquals(component.flavorRAM, 8489271296)
        self.assertEquals(component.flavorType, 'False')
        self.assertEquals(component.flavorVCPUs, 12)
        self.assertEquals(component.resourceId, None)

    def test_FloatingIp(self):
        component = self.device.getObjByPath('components/floatingip-1d7020d1-2377-48ba-ab6c-8ba90cd6564b')
        self.assertEquals(component.title, '')
        self.assertEquals(component.fixed_ip_address, '20.20.20.7')
        self.assertEquals(component.floating_ip_address, '172.23.105.157')
        self.assertEquals(component.floatingipId, '1d7020d1-2377-48ba-ab6c-8ba90cd6564b')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')

    def test_Host(self):
        component = self.device.getObjByPath('components/host-nfvi-micropod-new-compute-1')
        self.assertEquals(component.title, 'nfvi-micropod-new-compute-1')
        self.assertEquals(component.host_ip, None)
        self.assertEquals(component.hostfqdn, None)
        self.assertEquals(component.hostlocalname, None)
        self.assertEquals(component.hostname, 'nfvi-micropod-new-compute-1')
        self.assertEquals(component.resourceId, None)

        component = self.device.getObjByPath('components/host-nfvi-micropod-new-compute-2')
        self.assertEquals(component.title, 'nfvi-micropod-new-compute-2')
        self.assertEquals(component.host_ip, None)
        self.assertEquals(component.hostfqdn, None)
        self.assertEquals(component.hostlocalname, None)
        self.assertEquals(component.hostname, 'nfvi-micropod-new-compute-2')
        self.assertEquals(component.resourceId, None)

        component = self.device.getObjByPath('components/host-nfvi-micropod-node-1')
        self.assertEquals(component.title, 'nfvi-micropod-node-1')
        self.assertEquals(component.host_ip, None)
        self.assertEquals(component.hostfqdn, None)
        self.assertEquals(component.hostlocalname, None)
        self.assertEquals(component.hostname, 'nfvi-micropod-node-1')
        self.assertEquals(component.resourceId, None)

        component = self.device.getObjByPath('components/host-nfvi-micropod-node-2')
        self.assertEquals(component.title, 'nfvi-micropod-node-2')
        self.assertEquals(component.host_ip, None)
        self.assertEquals(component.hostfqdn, None)
        self.assertEquals(component.hostlocalname, None)
        self.assertEquals(component.hostname, 'nfvi-micropod-node-2')
        self.assertEquals(component.resourceId, None)

        component = self.device.getObjByPath('components/host-nfvi-micropod-node-3')
        self.assertEquals(component.title, 'nfvi-micropod-node-3')
        self.assertEquals(component.host_ip, None)
        self.assertEquals(component.hostfqdn, None)
        self.assertEquals(component.hostlocalname, None)
        self.assertEquals(component.hostname, 'nfvi-micropod-node-3')
        self.assertEquals(component.resourceId, None)

    def test_Hypervisor(self):
        component = self.device.getObjByPath('components/hypervisor-3')
        self.assertEquals(component.title, 'NFVI-MICROPOD-New-compute-2.3')
        self.assertEquals(component.disk, '823')
        self.assertEquals(component.disk_free, '811')
        self.assertEquals(component.disk_used, '12')
        self.assertEquals(component.host_ip, '192.168.202.14')
        self.assertEquals(component.hostfqdn, 'NFVI-MICROPOD-New-compute-2')
        self.assertEquals(component.hstate, 'UP')
        self.assertEquals(component.hstatus, 'ENABLED')
        self.assertEquals(component.hypervisorId, 3)
        self.assertEquals(component.hypervisor_type, 'QEMU')
        self.assertEquals(component.hypervisor_version, '201..')
        self.assertEquals(component.memory, '261872')
        self.assertEquals(component.memory_free, '228176')
        self.assertEquals(component.memory_used, '33696')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.vcpus, '48')
        self.assertEquals(component.vcpus_used, '12')
        self.assertIsNotNone(component.host())
        self.assertEquals(component.host().id, 'host-nfvi-micropod-new-compute-2')

        component = self.device.getObjByPath('components/hypervisor-6')
        self.assertEquals(component.title, 'NFVI-MICROPOD-New-compute-1.6')
        self.assertEquals(component.disk, '823')
        self.assertEquals(component.disk_free, '823')
        self.assertEquals(component.disk_used, '0')
        self.assertEquals(component.host_ip, '192.168.202.13')
        self.assertEquals(component.hostfqdn, 'NFVI-MICROPOD-New-compute-1')
        self.assertEquals(component.hstate, 'UP')
        self.assertEquals(component.hstatus, 'ENABLED')
        self.assertEquals(component.hypervisorId, 6)
        self.assertEquals(component.hypervisor_type, 'QEMU')
        self.assertEquals(component.hypervisor_version, '201..')
        self.assertEquals(component.memory, '262032')
        self.assertEquals(component.memory_free, '236432')
        self.assertEquals(component.memory_used, '25600')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.vcpus, '48')
        self.assertEquals(component.vcpus_used, '0')
        self.assertIsNotNone(component.host())
        self.assertEquals(component.host().id, 'host-nfvi-micropod-new-compute-1')

        component = self.device.getObjByPath('components/hypervisor-9')
        self.assertEquals(component.title, 'NFVI-MICROPOD-node-2.9')
        self.assertEquals(component.disk, '796')
        self.assertEquals(component.disk_free, '796')
        self.assertEquals(component.disk_used, '0')
        self.assertEquals(component.host_ip, '192.168.202.12')
        self.assertEquals(component.hostfqdn, 'NFVI-MICROPOD-node-2')
        self.assertEquals(component.hstate, 'UP')
        self.assertEquals(component.hstatus, 'ENABLED')
        self.assertEquals(component.hypervisorId, 9)
        self.assertEquals(component.hypervisor_type, 'QEMU')
        self.assertEquals(component.hypervisor_version, '201..')
        self.assertEquals(component.memory, '262032')
        self.assertEquals(component.memory_free, '220048')
        self.assertEquals(component.memory_used, '41984')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.vcpus, '44')
        self.assertEquals(component.vcpus_used, '0')
        self.assertIsNotNone(component.host())
        self.assertEquals(component.host().id, 'host-nfvi-micropod-node-2')

        component = self.device.getObjByPath('components/hypervisor-12')
        self.assertEquals(component.title, 'NFVI-MICROPOD-node-3.12')
        self.assertEquals(component.disk, '796')
        self.assertEquals(component.disk_free, '796')
        self.assertEquals(component.disk_used, '0')
        self.assertEquals(component.host_ip, '192.168.202.11')
        self.assertEquals(component.hostfqdn, 'NFVI-MICROPOD-node-3')
        self.assertEquals(component.hstate, 'UP')
        self.assertEquals(component.hstatus, 'ENABLED')
        self.assertEquals(component.hypervisorId, 12)
        self.assertEquals(component.hypervisor_type, 'QEMU')
        self.assertEquals(component.hypervisor_version, '201..')
        self.assertEquals(component.memory, '262032')
        self.assertEquals(component.memory_free, '220048')
        self.assertEquals(component.memory_used, '41984')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.vcpus, '44')
        self.assertEquals(component.vcpus_used, '0')
        self.assertIsNotNone(component.host())
        self.assertEquals(component.host().id, 'host-nfvi-micropod-node-3')

        component = self.device.getObjByPath('components/hypervisor-15')
        self.assertEquals(component.title, 'NFVI-MICROPOD-node-1.15')
        self.assertEquals(component.disk, '797')
        self.assertEquals(component.disk_free, '797')
        self.assertEquals(component.disk_used, '0')
        self.assertEquals(component.host_ip, '192.168.202.10')
        self.assertEquals(component.hostfqdn, 'NFVI-MICROPOD-node-1')
        self.assertEquals(component.hstate, 'UP')
        self.assertEquals(component.hstatus, 'ENABLED')
        self.assertEquals(component.hypervisorId, 15)
        self.assertEquals(component.hypervisor_type, 'QEMU')
        self.assertEquals(component.hypervisor_version, '201..')
        self.assertEquals(component.memory, '130961')
        self.assertEquals(component.memory_free, '88977')
        self.assertEquals(component.memory_used, '41984')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.vcpus, '44')
        self.assertEquals(component.vcpus_used, '0')
        self.assertIsNotNone(component.host())
        self.assertEquals(component.host().id, 'host-nfvi-micropod-node-1')

    def test_Image(self):
        component = self.device.getObjByPath('components/image-2506822e-98fa-44dd-a7e9-18cd4bb374f0')
        self.assertEquals(component.title, 'test-vm1_snap')
        self.assertEquals(component.imageCreated, '2018/11/29 17:55:04.000')
        self.assertEquals(component.imageId, '2506822e-98fa-44dd-a7e9-18cd4bb374f0')
        self.assertEquals(component.imageStatus, 'ACTIVE')
        self.assertEquals(component.imageUpdated, '2018/11/29 17:55:44.000')
        self.assertEquals(component.resourceId, None)

        component = self.device.getObjByPath('components/image-ae1f15e6-c577-449f-9902-87a2f08883a5')
        self.assertEquals(component.title, 'RHEL-guest-image')
        self.assertEquals(component.imageCreated, '2018/11/10 19:35:08.000')
        self.assertEquals(component.imageId, 'ae1f15e6-c577-449f-9902-87a2f08883a5')
        self.assertEquals(component.imageStatus, 'ACTIVE')
        self.assertEquals(component.imageUpdated, '2018/11/10 19:35:19.000')
        self.assertEquals(component.resourceId, None)

    def test_Instance(self):
        component = self.device.getObjByPath('components/server-5228f94a-75c8-4dec-9024-47fabca12af0')
        self.assertEquals(component.title, 'test-vm1')
        self.assertEquals(component.biosUuid, None)
        self.assertEquals(component.hostId, 'ddd88491e2ce37c3a3110659ec0223262e97e2188310913806bbb538')
        self.assertEquals(component.hostName, 'test-vm1')
        self.assertEquals(component.hypervisorInstanceName, 'instance-0000000f')
        self.assertEquals(component.powerState, 'running')
        self.assertEquals(component.privateIps, ['20.20.20.7'])
        self.assertEquals(component.publicIps, ['172.23.105.157'])
        self.assertEquals(component.resourceId, '5228f94a-75c8-4dec-9024-47fabca12af0')
        self.assertEquals(component.serialNumber, None)
        self.assertEquals(component.serverBackupDaily, 'DISABLED')
        self.assertEquals(component.serverBackupEnabled, False)
        self.assertEquals(component.serverBackupWeekly, 'DISABLED')
        self.assertEquals(component.serverId, '5228f94a-75c8-4dec-9024-47fabca12af0')
        self.assertEquals(component.serverStatus, 'active')
        self.assertEquals(component.taskState, 'no task in progress')
        self.assertEquals(component.vmState, 'active')
        self.assertIsNotNone(component.flavor())
        self.assertEquals(component.flavor().id, 'flavor-1578682c-f2e5-4b67-b6ef-bc1fb5348775')
        self.assertIsNotNone(component.hypervisor())
        self.assertEquals(component.hypervisor().id, 'hypervisor-3')
        self.assertIsNotNone(component.image())
        self.assertEquals(component.image().id, 'image-ae1f15e6-c577-449f-9902-87a2f08883a5')

    def test_Network(self):
        component = self.device.getObjByPath('components/network-18ed9913-25ba-453a-a798-db1b1d0d2db8')
        self.assertEquals(component.title, 'network1')
        self.assertEquals(component.admin_state_up, True)
        self.assertEquals(component.netExternal, False)
        self.assertEquals(component.netId, '18ed9913-25ba-453a-a798-db1b1d0d2db8')
        self.assertEquals(component.netStatus, 'ACTIVE')
        self.assertEquals(component.netType, 'VLAN')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.title, 'network1')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])

        component = self.device.getObjByPath('components/network-1fe866ac-45f4-4549-a2fd-0fc468c00b1d')
        self.assertEquals(component.title, 'HA network tenant a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertEquals(component.admin_state_up, True)
        self.assertEquals(component.netExternal, False)
        self.assertEquals(component.netId, '1fe866ac-45f4-4549-a2fd-0fc468c00b1d')
        self.assertEquals(component.netStatus, 'ACTIVE')
        self.assertEquals(component.netType, 'VLAN')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.title, 'HA network tenant a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])

        component = self.device.getObjByPath('components/network-8d14cd44-145c-4e39-ad55-d44afe95d3c8')
        self.assertEquals(component.title, 'network2')
        self.assertEquals(component.admin_state_up, True)
        self.assertEquals(component.netExternal, False)
        self.assertEquals(component.netId, '8d14cd44-145c-4e39-ad55-d44afe95d3c8')
        self.assertEquals(component.netStatus, 'ACTIVE')
        self.assertEquals(component.netType, 'VLAN')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.title, 'network2')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])

        component = self.device.getObjByPath('components/network-a7d05a2d-2cab-4b4b-8cd1-ff5089860e27')
        self.assertEquals(component.title, 'ext-net')
        self.assertEquals(component.admin_state_up, True)
        self.assertEquals(component.netExternal, True)
        self.assertEquals(component.netId, 'a7d05a2d-2cab-4b4b-8cd1-ff5089860e27')
        self.assertEquals(component.netStatus, 'ACTIVE')
        self.assertEquals(component.netType, 'FLAT')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.title, 'ext-net')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), ['floatingip-1d7020d1-2377-48ba-ab6c-8ba90cd6564b'])

    def test_NeutronAgent(self):
        component = self.device.getObjByPath('components/agent-30f65c69-120d-4287-bf0c-b2d259134d2b')
        self.assertEquals(component.title, 'Metadata agent@nfvi-micropod-node-1')
        self.assertEquals(component.agentId, '30f65c69-120d-4287-bf0c-b2d259134d2b')
        self.assertEquals(component.binary, 'neutron-metadata-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'Metadata agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-1')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), [])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/agent-4bd61243-710a-4b2c-8b05-bdbbeb52e901')
        self.assertEquals(component.title, 'L3 agent@nfvi-micropod-node-1')
        self.assertEquals(component.agentId, '4bd61243-710a-4b2c-8b05-bdbbeb52e901')
        self.assertEquals(component.binary, 'neutron-l3-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'L3 agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-1')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), ['network-a7d05a2d-2cab-4b4b-8cd1-ff5089860e27'])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/agent-7aae7414-4161-4ee1-a7dd-575338f072d1')
        self.assertEquals(component.title, 'L3 agent@nfvi-micropod-node-2')
        self.assertEquals(component.agentId, '7aae7414-4161-4ee1-a7dd-575338f072d1')
        self.assertEquals(component.binary, 'neutron-l3-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'L3 agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-2')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), ['network-a7d05a2d-2cab-4b4b-8cd1-ff5089860e27'])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/agent-7d3c0f7e-f38b-4a47-8f1b-711461f26101')
        self.assertEquals(component.title, 'L3 agent@nfvi-micropod-node-3')
        self.assertEquals(component.agentId, '7d3c0f7e-f38b-4a47-8f1b-711461f26101')
        self.assertEquals(component.binary, 'neutron-l3-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'L3 agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-3')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), ['network-a7d05a2d-2cab-4b4b-8cd1-ff5089860e27'])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/agent-86d17ce3-a8f8-4174-9389-d23118afbd42')
        self.assertEquals(component.title, 'Metadata agent@nfvi-micropod-node-3')
        self.assertEquals(component.agentId, '86d17ce3-a8f8-4174-9389-d23118afbd42')
        self.assertEquals(component.binary, 'neutron-metadata-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'Metadata agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-3')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), [])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/agent-9541c0ed-3fe4-4409-8f2f-8ac95998ab2f')
        self.assertEquals(component.title, 'DHCP agent@nfvi-micropod-node-1')
        self.assertEquals(component.agentId, '9541c0ed-3fe4-4409-8f2f-8ac95998ab2f')
        self.assertEquals(component.binary, 'neutron-dhcp-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'DHCP agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-1')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), ['network-18ed9913-25ba-453a-a798-db1b1d0d2db8', 'network-8d14cd44-145c-4e39-ad55-d44afe95d3c8', 'network-a7d05a2d-2cab-4b4b-8cd1-ff5089860e27'])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/agent-d7ad6926-236c-4cbd-ae14-8f1cfc18de77')
        self.assertEquals(component.title, 'Metadata agent@nfvi-micropod-node-2')
        self.assertEquals(component.agentId, 'd7ad6926-236c-4cbd-ae14-8f1cfc18de77')
        self.assertEquals(component.binary, 'neutron-metadata-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'Metadata agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-2')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), [])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/agent-da329350-83f6-4cc7-b4e4-36ad9b0292d3')
        self.assertEquals(component.title, 'DHCP agent@nfvi-micropod-node-3')
        self.assertEquals(component.agentId, 'da329350-83f6-4cc7-b4e4-36ad9b0292d3')
        self.assertEquals(component.binary, 'neutron-dhcp-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'DHCP agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-3')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), ['network-18ed9913-25ba-453a-a798-db1b1d0d2db8', 'network-1fe866ac-45f4-4549-a2fd-0fc468c00b1d'])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/agent-f06fc5e8-a7ed-4c83-8018-05fa250c998a')
        self.assertEquals(component.title, 'DHCP agent@nfvi-micropod-node-2')
        self.assertEquals(component.agentId, 'f06fc5e8-a7ed-4c83-8018-05fa250c998a')
        self.assertEquals(component.binary, 'neutron-dhcp-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'DHCP agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-2')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), ['network-1fe866ac-45f4-4549-a2fd-0fc468c00b1d', 'network-8d14cd44-145c-4e39-ad55-d44afe95d3c8', 'network-a7d05a2d-2cab-4b4b-8cd1-ff5089860e27'])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

    def test_NovaService(self):
        component = self.device.getObjByPath('components/service-nova-conductor-nfvi-micropod-node-3-internal')
        self.assertEquals(component.title, 'nova-conductor@nfvi-micropod-node-3 (internal)')
        self.assertEquals(component.binary, 'nova-conductor')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-3')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/service-nova-conductor-nfvi-micropod-node-2-internal')
        self.assertEquals(component.title, 'nova-conductor@nfvi-micropod-node-2 (internal)')
        self.assertEquals(component.binary, 'nova-conductor')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-2')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/service-nova-conductor-nfvi-micropod-node-1-internal')
        self.assertEquals(component.title, 'nova-conductor@nfvi-micropod-node-1 (internal)')
        self.assertEquals(component.binary, 'nova-conductor')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-1')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/service-nova-scheduler-nfvi-micropod-node-2-internal')
        self.assertEquals(component.title, 'nova-scheduler@nfvi-micropod-node-2 (internal)')
        self.assertEquals(component.binary, 'nova-scheduler')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-2')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/service-nova-scheduler-nfvi-micropod-node-3-internal')
        self.assertEquals(component.title, 'nova-scheduler@nfvi-micropod-node-3 (internal)')
        self.assertEquals(component.binary, 'nova-scheduler')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-3')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/service-nova-scheduler-nfvi-micropod-node-1-internal')
        self.assertEquals(component.title, 'nova-scheduler@nfvi-micropod-node-1 (internal)')
        self.assertEquals(component.binary, 'nova-scheduler')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-1')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/service-nova-compute-nfvi-micropod-new-compute-1-nova')
        self.assertEquals(component.title, 'nova-compute@nfvi-micropod-new-compute-1 (nova)')
        self.assertEquals(component.binary, 'nova-compute')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-new-compute-1')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/service-nova-compute-nfvi-micropod-new-compute-2-nova')
        self.assertEquals(component.title, 'nova-compute@nfvi-micropod-new-compute-2 (nova)')
        self.assertEquals(component.binary, 'nova-compute')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-new-compute-2')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/service-nova-compute-nfvi-micropod-node-2-nova')
        self.assertEquals(component.title, 'nova-compute@nfvi-micropod-node-2 (nova)')
        self.assertEquals(component.binary, 'nova-compute')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-2')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/service-nova-compute-nfvi-micropod-node-3-nova')
        self.assertEquals(component.title, 'nova-compute@nfvi-micropod-node-3 (nova)')
        self.assertEquals(component.binary, 'nova-compute')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-3')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/service-nova-compute-nfvi-micropod-node-1-nova')
        self.assertEquals(component.title, 'nova-compute@nfvi-micropod-node-1 (nova)')
        self.assertEquals(component.binary, 'nova-compute')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-1')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/service-nova-consoleauth-nfvi-micropod-node-2-internal')
        self.assertEquals(component.title, 'nova-consoleauth@nfvi-micropod-node-2 (internal)')
        self.assertEquals(component.binary, 'nova-consoleauth')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-2')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/service-nova-consoleauth-nfvi-micropod-node-3-internal')
        self.assertEquals(component.title, 'nova-consoleauth@nfvi-micropod-node-3 (internal)')
        self.assertEquals(component.binary, 'nova-consoleauth')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-3')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/service-nova-consoleauth-nfvi-micropod-node-1-internal')
        self.assertEquals(component.title, 'nova-consoleauth@nfvi-micropod-node-1 (internal)')
        self.assertEquals(component.binary, 'nova-consoleauth')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-nfvi-micropod-node-1')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

    def test_Pool(self):
        component = self.device.getObjByPath('components/pool-ceph_ceph_ceph')
        self.assertEquals(component.title, 'ceph@ceph#ceph')
        self.assertEquals(component.allocated_capacity, '')
        self.assertEquals(component.driver_version, '1.2.0')
        self.assertEquals(component.free_capacity, '5304.33 GB')
        self.assertEquals(component.location, '')
        self.assertEquals(component.qos_support, 'False')
        self.assertEquals(component.reserved_percentage, '0%')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.storage_protocol, 'ceph')
        self.assertEquals(component.total_capacity, '5304.33 GB')
        self.assertEquals(component.vendor_name, 'Open Source')
        self.assertEquals(component.volume_backend, '0')
        self.assertIsNone(component.orgComponent())

    def test_Port(self):
        component = self.device.getObjByPath('components/port-0b5bed0d-635a-4257-b804-497295264385')
        self.assertEquals(component.title, 'HA port tenant a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:router_ha_interface')
        self.assertEquals(component.fixed_ip_list, '169.254.192.7')
        self.assertEquals(component.mac_address, 'FA:16:3E:F4:77:8E')
        self.assertEquals(component.portId, '0b5bed0d-635a-4257-b804-497295264385')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, 'HA port tenant a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertEquals(component.vif_type, 'tap')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-1fe866ac-45f4-4549-a2fd-0fc468c00b1d')

        component = self.device.getObjByPath('components/port-0f5985d2-7310-45e0-a484-661660a13851')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:ha_router_replicated_interface')
        self.assertEquals(component.fixed_ip_list, '20.20.20.1')
        self.assertEquals(component.mac_address, 'FA:16:3E:36:A7:14')
        self.assertEquals(component.portId, '0f5985d2-7310-45e0-a484-661660a13851')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'tap')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-18ed9913-25ba-453a-a798-db1b1d0d2db8')

        component = self.device.getObjByPath('components/port-1fd0be5c-c5a7-45b9-afbc-72e951b01015')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:ha_router_replicated_interface')
        self.assertEquals(component.fixed_ip_list, '30.30.30.1')
        self.assertEquals(component.mac_address, 'FA:16:3E:7C:48:B8')
        self.assertEquals(component.portId, '1fd0be5c-c5a7-45b9-afbc-72e951b01015')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'tap')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-8d14cd44-145c-4e39-ad55-d44afe95d3c8')

        component = self.device.getObjByPath('components/port-21de332b-53f4-4a4a-a07a-0be3f409abfa')
        self.assertEquals(component.title, 'HA port tenant a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:router_ha_interface')
        self.assertEquals(component.fixed_ip_list, '169.254.192.5')
        self.assertEquals(component.mac_address, 'FA:16:3E:E7:EF:F0')
        self.assertEquals(component.portId, '21de332b-53f4-4a4a-a07a-0be3f409abfa')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, 'HA port tenant a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertEquals(component.vif_type, 'tap')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-1fe866ac-45f4-4549-a2fd-0fc468c00b1d')

        component = self.device.getObjByPath('components/port-3cd674d5-c842-4fee-93bb-bafd71e09e44')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:router_gateway')
        self.assertEquals(component.fixed_ip_list, '172.23.105.151')
        self.assertEquals(component.mac_address, 'FA:16:3E:71:F1:34')
        self.assertEquals(component.portId, '3cd674d5-c842-4fee-93bb-bafd71e09e44')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'tap')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-a7d05a2d-2cab-4b4b-8cd1-ff5089860e27')

        component = self.device.getObjByPath('components/port-6ab91201-50fd-4e7c-86df-2617d26cc02e')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:dhcp')
        self.assertEquals(component.fixed_ip_list, '30.30.30.2')
        self.assertEquals(component.mac_address, 'FA:16:3E:10:DD:7F')
        self.assertEquals(component.portId, '6ab91201-50fd-4e7c-86df-2617d26cc02e')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'tap')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-8d14cd44-145c-4e39-ad55-d44afe95d3c8')

        component = self.device.getObjByPath('components/port-8bc346b2-d6c4-4111-a30a-5aaf6ae44ae0')
        self.assertEquals(component.title, 'HA port tenant a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:router_ha_interface')
        self.assertEquals(component.fixed_ip_list, '169.254.192.3')
        self.assertEquals(component.mac_address, 'FA:16:3E:18:08:F0')
        self.assertEquals(component.portId, '8bc346b2-d6c4-4111-a30a-5aaf6ae44ae0')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, 'HA port tenant a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertEquals(component.vif_type, 'tap')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-1fe866ac-45f4-4549-a2fd-0fc468c00b1d')

        component = self.device.getObjByPath('components/port-a133cb5f-cb44-4e48-8225-e5da6ac65f44')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:dhcp')
        self.assertEquals(component.fixed_ip_list, '20.20.20.3')
        self.assertEquals(component.mac_address, 'FA:16:3E:23:EF:4B')
        self.assertEquals(component.portId, 'a133cb5f-cb44-4e48-8225-e5da6ac65f44')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'tap')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-18ed9913-25ba-453a-a798-db1b1d0d2db8')

        component = self.device.getObjByPath('components/port-a2148f2f-e523-4578-afa8-8088bc6b5395')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:floatingip')
        self.assertEquals(component.fixed_ip_list, '172.23.105.157')
        self.assertEquals(component.mac_address, 'FA:16:3E:92:B3:D8')
        self.assertEquals(component.portId, 'a2148f2f-e523-4578-afa8-8088bc6b5395')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'N/A')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'unbound')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-a7d05a2d-2cab-4b4b-8cd1-ff5089860e27')

        component = self.device.getObjByPath('components/port-b32542d6-4b24-483d-b92b-d055c96ec75e')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:dhcp')
        self.assertEquals(component.fixed_ip_list, '20.20.20.2')
        self.assertEquals(component.mac_address, 'FA:16:3E:AB:81:7F')
        self.assertEquals(component.portId, 'b32542d6-4b24-483d-b92b-d055c96ec75e')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'tap')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-18ed9913-25ba-453a-a798-db1b1d0d2db8')

        component = self.device.getObjByPath('components/port-c8c2114b-0bee-420b-a522-7849537574a6')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'compute:nova')
        self.assertEquals(component.fixed_ip_list, '20.20.20.7')
        self.assertEquals(component.mac_address, 'FA:16:3E:1C:A6:3E')
        self.assertEquals(component.portId, 'c8c2114b-0bee-420b-a522-7849537574a6')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'vhostuser')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), ['floatingip-1d7020d1-2377-48ba-ab6c-8ba90cd6564b'])
        self.assertIsNotNone(component.instance())
        self.assertEquals(component.instance().id, 'server-5228f94a-75c8-4dec-9024-47fabca12af0')
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-18ed9913-25ba-453a-a798-db1b1d0d2db8')

        component = self.device.getObjByPath('components/port-cbf10c2a-726e-4f25-a64f-59306ae76994')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:dhcp')
        self.assertEquals(component.fixed_ip_list, '30.30.30.3')
        self.assertEquals(component.mac_address, 'FA:16:3E:DB:41:29')
        self.assertEquals(component.portId, 'cbf10c2a-726e-4f25-a64f-59306ae76994')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'tap')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-8d14cd44-145c-4e39-ad55-d44afe95d3c8')

    def test_Region(self):
        component = self.device.getObjByPath('components/region-RegionOne')
        self.assertEquals(component.title, 'RegionOne')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.childOrgs())
        self.assertEquals(sorted([x.id for x in component.childOrgs()]), ['zone-internal', 'zone-nova'])
        self.assertIsNotNone(component.hosts())
        self.assertEquals(sorted([x.id for x in component.hosts()]), [])

    def test_Router(self):
        component = self.device.getObjByPath('components/router-13e87314-0c1d-487b-b21d-1e1c745ef3f9')
        self.assertEquals(component.title, 'Router1')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.gateways, ['172.23.105.151'])
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.routerId, '13e87314-0c1d-487b-b21d-1e1c745ef3f9')
        self.assertEquals(component.routes, [])
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, 'Router1')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), ['floatingip-1d7020d1-2377-48ba-ab6c-8ba90cd6564b'])
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-a7d05a2d-2cab-4b4b-8cd1-ff5089860e27')
        self.assertIsNotNone(component.neutronAgents())
        self.assertEquals(sorted([x.id for x in component.neutronAgents()]), ['agent-4bd61243-710a-4b2c-8b05-bdbbeb52e901', 'agent-7aae7414-4161-4ee1-a7dd-575338f072d1', 'agent-7d3c0f7e-f38b-4a47-8f1b-711461f26101'])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), [])

    def test_Subnet(self):
        component = self.device.getObjByPath('components/subnet-5afbf92c-b723-4401-9df8-df1cd2c9ce18')
        self.assertEquals(component.title, 'HA subnet tenant a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertEquals(component.cidr, '169.254.192.0/18')
        self.assertEquals(component.dns_nameservers, [])
        self.assertEquals(component.gateway_ip, None)
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.subnetId, '5afbf92c-b723-4401-9df8-df1cd2c9ce18')
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-1fe866ac-45f4-4549-a2fd-0fc468c00b1d')
        self.assertIsNotNone(component.neutronAgents())
        self.assertEquals(sorted([x.id for x in component.neutronAgents()]), ['agent-da329350-83f6-4cc7-b4e4-36ad9b0292d3', 'agent-f06fc5e8-a7ed-4c83-8018-05fa250c998a'])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), ['port-0b5bed0d-635a-4257-b804-497295264385', 'port-21de332b-53f4-4a4a-a07a-0be3f409abfa', 'port-8bc346b2-d6c4-4111-a30a-5aaf6ae44ae0'])
        self.assertIsNotNone(component.routers())
        self.assertEquals(sorted([x.id for x in component.routers()]), ['router-13e87314-0c1d-487b-b21d-1e1c745ef3f9'])

        component = self.device.getObjByPath('components/subnet-7b2dff09-dcde-4cb5-b34a-f588c234c36b')
        self.assertEquals(component.title, 'subnet-ext')
        self.assertEquals(component.cidr, '172.23.105.144/28')
        self.assertEquals(component.dns_nameservers, ['10.84.70.6'])
        self.assertEquals(component.gateway_ip, '172.23.105.145')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.subnetId, '7b2dff09-dcde-4cb5-b34a-f588c234c36b')
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-a7d05a2d-2cab-4b4b-8cd1-ff5089860e27')
        self.assertIsNotNone(component.neutronAgents())
        self.assertEquals(sorted([x.id for x in component.neutronAgents()]), ['agent-4bd61243-710a-4b2c-8b05-bdbbeb52e901', 'agent-7aae7414-4161-4ee1-a7dd-575338f072d1', 'agent-7d3c0f7e-f38b-4a47-8f1b-711461f26101', 'agent-9541c0ed-3fe4-4409-8f2f-8ac95998ab2f', 'agent-f06fc5e8-a7ed-4c83-8018-05fa250c998a'])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), ['port-3cd674d5-c842-4fee-93bb-bafd71e09e44', 'port-a2148f2f-e523-4578-afa8-8088bc6b5395'])
        self.assertIsNotNone(component.routers())
        self.assertEquals(sorted([x.id for x in component.routers()]), ['router-13e87314-0c1d-487b-b21d-1e1c745ef3f9'])

        component = self.device.getObjByPath('components/subnet-d6d88a19-e836-4773-8b17-678aa738a05c')
        self.assertEquals(component.title, 'subnet1')
        self.assertEquals(component.cidr, '20.20.20.0/24')
        self.assertEquals(component.dns_nameservers, [])
        self.assertEquals(component.gateway_ip, '20.20.20.1')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.subnetId, 'd6d88a19-e836-4773-8b17-678aa738a05c')
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-18ed9913-25ba-453a-a798-db1b1d0d2db8')
        self.assertIsNotNone(component.neutronAgents())
        self.assertEquals(sorted([x.id for x in component.neutronAgents()]), ['agent-9541c0ed-3fe4-4409-8f2f-8ac95998ab2f', 'agent-da329350-83f6-4cc7-b4e4-36ad9b0292d3'])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), ['port-0f5985d2-7310-45e0-a484-661660a13851', 'port-a133cb5f-cb44-4e48-8225-e5da6ac65f44', 'port-b32542d6-4b24-483d-b92b-d055c96ec75e', 'port-c8c2114b-0bee-420b-a522-7849537574a6'])
        self.assertIsNotNone(component.routers())
        self.assertEquals(sorted([x.id for x in component.routers()]), ['router-13e87314-0c1d-487b-b21d-1e1c745ef3f9'])

        component = self.device.getObjByPath('components/subnet-f1bd3abd-a64a-4626-b1e2-c5ecf770ebf0')
        self.assertEquals(component.title, 'subnet2')
        self.assertEquals(component.cidr, '30.30.30.0/24')
        self.assertEquals(component.dns_nameservers, [])
        self.assertEquals(component.gateway_ip, '30.30.30.1')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.subnetId, 'f1bd3abd-a64a-4626-b1e2-c5ecf770ebf0')
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-8d14cd44-145c-4e39-ad55-d44afe95d3c8')
        self.assertIsNotNone(component.neutronAgents())
        self.assertEquals(sorted([x.id for x in component.neutronAgents()]), ['agent-9541c0ed-3fe4-4409-8f2f-8ac95998ab2f', 'agent-f06fc5e8-a7ed-4c83-8018-05fa250c998a'])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), ['port-1fd0be5c-c5a7-45b9-afbc-72e951b01015', 'port-6ab91201-50fd-4e7c-86df-2617d26cc02e', 'port-cbf10c2a-726e-4f25-a64f-59306ae76994'])
        self.assertIsNotNone(component.routers())
        self.assertEquals(sorted([x.id for x in component.routers()]), ['router-13e87314-0c1d-487b-b21d-1e1c745ef3f9'])

    def test_Quota(self):
        component = self.device.getObjByPath('components/quota-a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertEquals(component.title, '')
        self.assertEquals(component.backup_bytes, 1000)
        self.assertEquals(component.backups, 10)
        self.assertEquals(component.bytes, 1000)
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.snapshots, 10)
        self.assertEquals(component.tenant_name, 'admin')
        self.assertEquals(component.volumes, 10)

        component = self.device.getObjByPath('components/quota-b2b1a48714a641fcaa82c4d48aa444c9')
        self.assertEquals(component.title, '')
        self.assertEquals(component.backup_bytes, 1000)
        self.assertEquals(component.backups, 10)
        self.assertEquals(component.bytes, 1000)
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.snapshots, 10)
        self.assertEquals(component.tenant_name, 'service')
        self.assertEquals(component.volumes, 10)

    def test_Tenant(self):
        component = self.device.getObjByPath('components/tenant-a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertEquals(component.title, 'admin')
        self.assertEquals(component.description, 'Bootstrap project for initializing the cloud.')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.tenantId, 'a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), ['floatingip-1d7020d1-2377-48ba-ab6c-8ba90cd6564b'])
        self.assertIsNotNone(component.instances())
        self.assertEquals(sorted([x.id for x in component.instances()]), ['server-5228f94a-75c8-4dec-9024-47fabca12af0'])
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), ['network-18ed9913-25ba-453a-a798-db1b1d0d2db8', 'network-8d14cd44-145c-4e39-ad55-d44afe95d3c8', 'network-a7d05a2d-2cab-4b4b-8cd1-ff5089860e27'])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), ['port-0f5985d2-7310-45e0-a484-661660a13851', 'port-1fd0be5c-c5a7-45b9-afbc-72e951b01015', 'port-6ab91201-50fd-4e7c-86df-2617d26cc02e', 'port-a133cb5f-cb44-4e48-8225-e5da6ac65f44', 'port-b32542d6-4b24-483d-b92b-d055c96ec75e', 'port-c8c2114b-0bee-420b-a522-7849537574a6', 'port-cbf10c2a-726e-4f25-a64f-59306ae76994'])
        self.assertIsNotNone(component.quota())
        self.assertEquals(component.quota().id, 'quota-a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertIsNotNone(component.routers())
        self.assertEquals(sorted([x.id for x in component.routers()]), ['router-13e87314-0c1d-487b-b21d-1e1c745ef3f9'])
        self.assertIsNotNone(component.subnets())
        self.assertEquals(sorted([x.id for x in component.subnets()]), ['subnet-7b2dff09-dcde-4cb5-b34a-f588c234c36b', 'subnet-d6d88a19-e836-4773-8b17-678aa738a05c', 'subnet-f1bd3abd-a64a-4626-b1e2-c5ecf770ebf0'])

        component = self.device.getObjByPath('components/tenant-b2b1a48714a641fcaa82c4d48aa444c9')
        self.assertEquals(component.title, 'service')
        self.assertEquals(component.description, None)
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.tenantId, 'b2b1a48714a641fcaa82c4d48aa444c9')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNotNone(component.instances())
        self.assertEquals(sorted([x.id for x in component.instances()]), [])
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), [])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), [])
        self.assertIsNotNone(component.quota())
        self.assertEquals(component.quota().id, 'quota-b2b1a48714a641fcaa82c4d48aa444c9')
        self.assertIsNotNone(component.routers())
        self.assertEquals(sorted([x.id for x in component.routers()]), [])
        self.assertIsNotNone(component.subnets())
        self.assertEquals(sorted([x.id for x in component.subnets()]), [])

        component = self.device.getObjByPath('components/tenant-')
        self.assertEquals(component.title, 'tenant-')
        self.assertEquals(component.description, 'tenant-')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.tenantId, '')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNotNone(component.instances())
        self.assertEquals(sorted([x.id for x in component.instances()]), [])
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), ['network-1fe866ac-45f4-4549-a2fd-0fc468c00b1d'])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), [])
        self.assertIsNone(component.quota())
        self.assertIsNotNone(component.routers())
        self.assertEquals(sorted([x.id for x in component.routers()]), [])
        self.assertIsNotNone(component.subnets())
        self.assertEquals(sorted([x.id for x in component.subnets()]), ['subnet-5afbf92c-b723-4401-9df8-df1cd2c9ce18'])

    def test_VolSnapshot(self):
        component = self.device.getObjByPath('components/snapshot-2e5750c5-f6a1-471d-b6a8-368a0c56226b')
        self.assertEquals(component.title, 'TestVol411Snap')
        self.assertEquals(component.created_at, '2018-11-29 17:54:16.000000')
        self.assertEquals(component.description, 'Test of a Snapshot')
        self.assertEquals(component.progress, None)
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.size, 2)
        self.assertEquals(component.status, 'AVAILABLE')
        self.assertIsNotNone(component.tenant())
        self.assertEquals(component.tenant().id, 'tenant-a11e16faa31e4b698be8bc3af0a7ae57')

    def test_Volume(self):
        component = self.device.getObjByPath('components/volume-99426129-acdc-4c53-b993-c0128b092505')
        self.assertEquals(component.title, 'TestVol411')
        self.assertEquals(component.avzone, 'nova')
        self.assertEquals(component.bootable, 'FALSE')
        self.assertEquals(component.created_at, '2018-11-29 17:53:44.000000')
        self.assertEquals(component.backend, 'ceph@ceph#ceph')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.size, 2)
        self.assertEquals(component.sourceVolumeId, None)
        self.assertEquals(component.status, 'AVAILABLE')
        self.assertEquals(component.volumeId, '99426129-acdc-4c53-b993-c0128b092505')
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.tenant())
        self.assertEquals(component.tenant().id, 'tenant-a11e16faa31e4b698be8bc3af0a7ae57')
        self.assertIsNotNone(component.volSnapshots())
        self.assertEquals(sorted([x.id for x in component.volSnapshots()]), ['snapshot-2e5750c5-f6a1-471d-b6a8-368a0c56226b'])
        self.assertIsNone(component.volType())


def test_suite():
    from unittest import TestSuite, makeSuite
    suite = TestSuite()
    suite.addTest(makeSuite(TestModelNFVINewtonFull))
    return suite


if __name__ == "__main__":
    from zope.testrunner.runner import Runner
    runner = Runner(found_suites=[test_suite()])
    runner.run()
