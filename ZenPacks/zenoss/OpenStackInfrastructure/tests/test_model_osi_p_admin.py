#!/usr/bin/env python

###########################################################################
#
# This program is part of Zenoss Core, an open source monitoring platform.
# Copyright (C) 2018, Zenoss Inc.
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 or (at your
# option) any later version as published by the Free Software Foundation.
#
# For complete information please visit: http://www.zenoss.com/oss/
#
###########################################################################

import os

import logging
logging.basicConfig(level=logging.INFO)
log = logging.getLogger('zen.OpenStackInfrastructure')


import Globals

from Products.DataCollector.ApplyDataMap import ApplyDataMap
from Products.ZenUtils.Utils import unused

from ZenPacks.zenoss.OpenStackInfrastructure.tests.utils import SharedModelTestLayer, SharedModelTestCase

unused(Globals)


class TestModelOSIPAdminLayer(SharedModelTestLayer):
    pass


class TestModelOSIPAdmin(SharedModelTestCase):

    disableLogging = False
    layer = TestModelOSIPAdminLayer

    def setUp(self):
        super(TestModelOSIPAdmin, self).setUp()

        self.applyDataMap = ApplyDataMap()._applyDataMap

        if not self.device:
            json_filename = os.path.dirname(__file__) + "/data/model/osi_p_admin.json"
            self.createDevice('testmodelOSIPAdmin', json_filename=json_filename)

        # from ZenPacks.zenoss.OpenStackInfrastructure.tests.utils import device_to_tests
        # print device_to_tests(self.device)
        # import pdb; pdb.set_trace()

    def test_ApiEndpoint(self):
        component = self.device.getObjByPath('components/apiendpoint-zOpenStackAuthUrl')
        self.assertEquals(component.title, 'http://1.2.3.4:5000/v2.0')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.service_type, 'identity')
        self.assertEquals(component.source, 'zOpenStackAuthUrl')
        self.assertEquals(component.url, 'http://1.2.3.4:5000/v2.0')

    def test_AvailabilityZone(self):
        component = self.device.getObjByPath('components/zone-nova')
        self.assertEquals(component.title, 'nova')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.childOrgs())
        self.assertEquals(sorted([x.id for x in component.childOrgs()]), [])
        self.assertIsNotNone(component.hosts())
        self.assertEquals(sorted([x.id for x in component.hosts()]), ['host-osi-p'])

        component = self.device.getObjByPath('components/zone-internal')
        self.assertEquals(component.title, 'internal')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.childOrgs())
        self.assertEquals(sorted([x.id for x in component.childOrgs()]), [])
        self.assertIsNotNone(component.hosts())
        self.assertEquals(sorted([x.id for x in component.hosts()]), [])

    def test_CinderApi(self):
        component = self.device.getObjByPath('components/service-cinder-api-10.87.209.165-RegionOne')
        self.assertEquals(component.title, 'cinder-api@10.87.209.165 (RegionOne)')
        self.assertEquals(component.binary, 'cinder-api')
        self.assertEquals(component.enabled, None)
        self.assertEquals(component.operStatus, None)
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-10.87.209.165')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'region-RegionOne')

    def test_CinderService(self):
        component = self.device.getObjByPath('components/service-cinder-scheduler-osi-p-nova')
        self.assertEquals(component.title, 'cinder-scheduler@osi-p (nova)')
        self.assertEquals(component.binary, 'cinder-scheduler')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-osi-p')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/service-cinder-backup-osi-p-nova')
        self.assertEquals(component.title, 'cinder-backup@osi-p (nova)')
        self.assertEquals(component.binary, 'cinder-backup')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-osi-p')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/service-cinder-volume-osi-p-nova')
        self.assertEquals(component.title, 'cinder-volume@osi-p (nova)')
        self.assertEquals(component.binary, 'cinder-volume')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-osi-p')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

    def test_Flavor(self):
        component = self.device.getObjByPath('components/flavor-0')
        self.assertEquals(component.title, 'm1.nano')
        self.assertEquals(component.flavorDisk, 1073741824)
        self.assertEquals(component.flavorId, '0')
        self.assertEquals(component.flavorRAM, 67108864)
        self.assertEquals(component.flavorType, 'True')
        self.assertEquals(component.flavorVCPUs, 1)
        self.assertEquals(component.resourceId, None)

        component = self.device.getObjByPath('components/flavor-1')
        self.assertEquals(component.title, 'm1.tiny')
        self.assertEquals(component.flavorDisk, 1073741824)
        self.assertEquals(component.flavorId, '1')
        self.assertEquals(component.flavorRAM, 536870912)
        self.assertEquals(component.flavorType, 'True')
        self.assertEquals(component.flavorVCPUs, 1)
        self.assertEquals(component.resourceId, None)

        component = self.device.getObjByPath('components/flavor-2')
        self.assertEquals(component.title, 'm1.small')
        self.assertEquals(component.flavorDisk, 21474836480)
        self.assertEquals(component.flavorId, '2')
        self.assertEquals(component.flavorRAM, 2147483648)
        self.assertEquals(component.flavorType, 'True')
        self.assertEquals(component.flavorVCPUs, 1)
        self.assertEquals(component.resourceId, None)

        component = self.device.getObjByPath('components/flavor-3')
        self.assertEquals(component.title, 'm1.medium')
        self.assertEquals(component.flavorDisk, 42949672960)
        self.assertEquals(component.flavorId, '3')
        self.assertEquals(component.flavorRAM, 4294967296)
        self.assertEquals(component.flavorType, 'True')
        self.assertEquals(component.flavorVCPUs, 2)
        self.assertEquals(component.resourceId, None)

        component = self.device.getObjByPath('components/flavor-4')
        self.assertEquals(component.title, 'm1.large')
        self.assertEquals(component.flavorDisk, 85899345920)
        self.assertEquals(component.flavorId, '4')
        self.assertEquals(component.flavorRAM, 8589934592)
        self.assertEquals(component.flavorType, 'True')
        self.assertEquals(component.flavorVCPUs, 4)
        self.assertEquals(component.resourceId, None)

        component = self.device.getObjByPath('components/flavor-5')
        self.assertEquals(component.title, 'm1.xlarge')
        self.assertEquals(component.flavorDisk, 171798691840)
        self.assertEquals(component.flavorId, '5')
        self.assertEquals(component.flavorRAM, 17179869184)
        self.assertEquals(component.flavorType, 'True')
        self.assertEquals(component.flavorVCPUs, 8)
        self.assertEquals(component.resourceId, None)

    def test_FloatingIp(self):
        component = self.device.getObjByPath('components/floatingip-733d3d80-3a29-4035-a333-577f1b60267c')
        self.assertEquals(component.title, '')
        self.assertEquals(component.fixed_ip_address, None)
        self.assertEquals(component.floating_ip_address, '172.24.4.4')
        self.assertEquals(component.floatingipId, '733d3d80-3a29-4035-a333-577f1b60267c')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'DOWN')

        component = self.device.getObjByPath('components/floatingip-d20b1cb0-4b52-4110-a784-cc73c913551e')
        self.assertEquals(component.title, '')
        self.assertEquals(component.fixed_ip_address, '10.0.0.4')
        self.assertEquals(component.floating_ip_address, '172.24.4.5')
        self.assertEquals(component.floatingipId, 'd20b1cb0-4b52-4110-a784-cc73c913551e')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')

        component = self.device.getObjByPath('components/floatingip-f18c2356-6373-4d94-b27c-aeff9532cbdb')
        self.assertEquals(component.title, '')
        self.assertEquals(component.fixed_ip_address, None)
        self.assertEquals(component.floating_ip_address, '172.24.4.6')
        self.assertEquals(component.floatingipId, 'f18c2356-6373-4d94-b27c-aeff9532cbdb')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'DOWN')

    def test_Host(self):
        component = self.device.getObjByPath('components/host-10.87.209.165')
        self.assertEquals(component.title, '10.87.209.165')
        self.assertEquals(component.host_ip, '10.0.0.13')
        self.assertEquals(component.hostfqdn, None)
        self.assertEquals(component.hostlocalname, None)
        self.assertEquals(component.hostname, '10.87.209.165')
        self.assertEquals(component.resourceId, None)

        component = self.device.getObjByPath('components/host-osi-p')
        self.assertEquals(component.title, 'osi-p')
        self.assertEquals(component.host_ip, '10.0.0.14')
        self.assertEquals(component.hostfqdn, None)
        self.assertEquals(component.hostlocalname, None)
        self.assertEquals(component.hostname, 'osi-p')
        self.assertEquals(component.resourceId, None)

    def test_Hypervisor(self):
        component = self.device.getObjByPath('components/hypervisor-1')
        self.assertEquals(component.title, 'osi-p.1')
        self.assertEquals(component.disk, '49')
        self.assertEquals(component.disk_free, '48')
        self.assertEquals(component.disk_used, '1')
        self.assertEquals(component.host_ip, '10.87.209.165')
        self.assertEquals(component.hostfqdn, 'osi-p')
        self.assertEquals(component.hstate, 'UP')
        self.assertEquals(component.hstatus, 'ENABLED')
        self.assertEquals(component.hypervisorId, 1)
        self.assertEquals(component.hypervisor_type, 'QEMU')
        self.assertEquals(component.hypervisor_version, '201..')
        self.assertEquals(component.memory, '8191')
        self.assertEquals(component.memory_free, '7167')
        self.assertEquals(component.memory_used, '1024')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.vcpus, '7')
        self.assertEquals(component.vcpus_used, '1')
        self.assertIsNotNone(component.host())
        self.assertEquals(component.host().id, 'host-osi-p')

    def test_Image(self):
        component = self.device.getObjByPath('components/image-fc6607b7-ccbf-4834-be6c-0a09faef19ec')
        self.assertEquals(component.title, 'cirros')
        self.assertEquals(component.imageCreated, '2018/10/31 19:52:53.000')
        self.assertEquals(component.imageId, 'fc6607b7-ccbf-4834-be6c-0a09faef19ec')
        self.assertEquals(component.imageStatus, 'ACTIVE')
        self.assertEquals(component.imageUpdated, '2018/10/31 19:52:53.000')
        self.assertEquals(component.resourceId, None)

    def test_Instance(self):
        component = self.device.getObjByPath('components/server-29132ff8-5048-4c63-a4c7-ba56c13d0895')
        self.assertEquals(component.title, 'test2')
        self.assertEquals(component.biosUuid, None)
        self.assertEquals(component.hostId, '')
        self.assertEquals(component.hostName, 'test2')
        self.assertEquals(component.hypervisorInstanceName, None)
        self.assertEquals(component.powerState, 'pending')
        self.assertEquals(component.privateIps, [])
        self.assertEquals(component.publicIps, [])
        self.assertEquals(component.resourceId, '29132ff8-5048-4c63-a4c7-ba56c13d0895')
        self.assertEquals(component.serialNumber, None)
        self.assertEquals(component.serverBackupDaily, 'DISABLED')
        self.assertEquals(component.serverBackupEnabled, False)
        self.assertEquals(component.serverBackupWeekly, 'DISABLED')
        self.assertEquals(component.serverId, '29132ff8-5048-4c63-a4c7-ba56c13d0895')
        self.assertEquals(component.serverStatus, 'error')
        self.assertEquals(component.taskState, 'no task in progress')
        self.assertEquals(component.vmState, 'error')
        self.assertIsNotNone(component.flavor())
        self.assertEquals(component.flavor().id, 'flavor-1')
        self.assertIsNone(component.hypervisor())
        self.assertIsNotNone(component.image())
        self.assertEquals(component.image().id, 'image-fc6607b7-ccbf-4834-be6c-0a09faef19ec')

        component = self.device.getObjByPath('components/server-4170a29a-4ed6-4391-babc-a82982d73dbe')
        self.assertEquals(component.title, 'provider-instance')
        self.assertEquals(component.biosUuid, None)
        self.assertEquals(component.hostId, '')
        self.assertEquals(component.hostName, 'provider-instance')
        self.assertEquals(component.hypervisorInstanceName, None)
        self.assertEquals(component.powerState, 'pending')
        self.assertEquals(component.privateIps, [])
        self.assertEquals(component.publicIps, [])
        self.assertEquals(component.resourceId, '4170a29a-4ed6-4391-babc-a82982d73dbe')
        self.assertEquals(component.serialNumber, None)
        self.assertEquals(component.serverBackupDaily, 'DISABLED')
        self.assertEquals(component.serverBackupEnabled, False)
        self.assertEquals(component.serverBackupWeekly, 'DISABLED')
        self.assertEquals(component.serverId, '4170a29a-4ed6-4391-babc-a82982d73dbe')
        self.assertEquals(component.serverStatus, 'error')
        self.assertEquals(component.taskState, 'no task in progress')
        self.assertEquals(component.vmState, 'error')
        self.assertIsNotNone(component.flavor())
        self.assertEquals(component.flavor().id, 'flavor-1')
        self.assertIsNone(component.hypervisor())
        self.assertIsNotNone(component.image())
        self.assertEquals(component.image().id, 'image-fc6607b7-ccbf-4834-be6c-0a09faef19ec')

        component = self.device.getObjByPath('components/server-b116be08-dfd0-4ef8-b58b-8ea46e1ffd87')
        self.assertEquals(component.title, 'provider-instance')
        self.assertEquals(component.biosUuid, None)
        self.assertEquals(component.hostId, 'f8e45c1bf050e413651989180961ed3d875de4c750749f8182d94ec7')
        self.assertEquals(component.hostName, 'provider-instance')
        self.assertEquals(component.hypervisorInstanceName, 'instance-00000001')
        self.assertEquals(component.powerState, 'running')
        self.assertEquals(component.privateIps, ['10.0.0.4'])
        self.assertEquals(component.publicIps, ['172.24.4.5'])
        self.assertEquals(component.resourceId, 'b116be08-dfd0-4ef8-b58b-8ea46e1ffd87')
        self.assertEquals(component.serialNumber, None)
        self.assertEquals(component.serverBackupDaily, 'DISABLED')
        self.assertEquals(component.serverBackupEnabled, False)
        self.assertEquals(component.serverBackupWeekly, 'DISABLED')
        self.assertEquals(component.serverId, 'b116be08-dfd0-4ef8-b58b-8ea46e1ffd87')
        self.assertEquals(component.serverStatus, 'active')
        self.assertEquals(component.taskState, 'no task in progress')
        self.assertEquals(component.vmState, 'active')
        self.assertIsNotNone(component.flavor())
        self.assertEquals(component.flavor().id, 'flavor-1')
        self.assertIsNotNone(component.hypervisor())
        self.assertEquals(component.hypervisor().id, 'hypervisor-1')
        self.assertIsNotNone(component.image())
        self.assertEquals(component.image().id, 'image-fc6607b7-ccbf-4834-be6c-0a09faef19ec')

    def test_Network(self):
        component = self.device.getObjByPath('components/network-0ccbb5ec-9737-4107-96ab-5fca0e5974fe')
        self.assertEquals(component.title, 'public')
        self.assertEquals(component.admin_state_up, True)
        self.assertEquals(component.netExternal, True)
        self.assertEquals(component.netId, '0ccbb5ec-9737-4107-96ab-5fca0e5974fe')
        self.assertEquals(component.netStatus, 'ACTIVE')
        self.assertEquals(component.netType, 'FLAT')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.title, 'public')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), ['floatingip-733d3d80-3a29-4035-a333-577f1b60267c', 'floatingip-d20b1cb0-4b52-4110-a784-cc73c913551e', 'floatingip-f18c2356-6373-4d94-b27c-aeff9532cbdb'])

        component = self.device.getObjByPath('components/network-f82afbca-d429-4dc7-b3c0-3ead28855f2e')
        self.assertEquals(component.title, 'private')
        self.assertEquals(component.admin_state_up, True)
        self.assertEquals(component.netExternal, False)
        self.assertEquals(component.netId, 'f82afbca-d429-4dc7-b3c0-3ead28855f2e')
        self.assertEquals(component.netStatus, 'ACTIVE')
        self.assertEquals(component.netType, 'VXLAN')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.title, 'private')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])

    def test_NeutronAgent(self):
        component = self.device.getObjByPath('components/agent-552a05c5-2454-49d2-9fbe-c27434532d67')
        self.assertEquals(component.title, 'Open vSwitch agent@osi-p')
        self.assertEquals(component.agentId, '552a05c5-2454-49d2-9fbe-c27434532d67')
        self.assertEquals(component.binary, 'neutron-openvswitch-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'Open vSwitch agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-osi-p')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), [])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/agent-5b14f0a0-1856-416e-8513-b343abb1379a')
        self.assertEquals(component.title, 'DHCP agent@osi-p')
        self.assertEquals(component.agentId, '5b14f0a0-1856-416e-8513-b343abb1379a')
        self.assertEquals(component.binary, 'neutron-dhcp-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'DHCP agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-osi-p')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), ['network-0ccbb5ec-9737-4107-96ab-5fca0e5974fe', 'network-f82afbca-d429-4dc7-b3c0-3ead28855f2e'])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/agent-70f5cf23-f76a-46a6-959d-8eb2cc70be7b')
        self.assertEquals(component.title, 'Metering agent@osi-p')
        self.assertEquals(component.agentId, '70f5cf23-f76a-46a6-959d-8eb2cc70be7b')
        self.assertEquals(component.binary, 'neutron-metering-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'Metering agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-osi-p')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), [])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/agent-aca99d33-7d7c-4e19-9693-24ce78fcd0fc')
        self.assertEquals(component.title, 'Metadata agent@osi-p')
        self.assertEquals(component.agentId, 'aca99d33-7d7c-4e19-9693-24ce78fcd0fc')
        self.assertEquals(component.binary, 'neutron-metadata-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'Metadata agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-osi-p')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), [])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

        component = self.device.getObjByPath('components/agent-d5dc68ba-9dcc-45cd-b4a7-95a4ba39e68c')
        self.assertEquals(component.title, 'L3 agent@osi-p')
        self.assertEquals(component.agentId, 'd5dc68ba-9dcc-45cd-b4a7-95a4ba39e68c')
        self.assertEquals(component.binary, 'neutron-l3-agent')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.type, 'L3 agent')
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-osi-p')
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), ['network-0ccbb5ec-9737-4107-96ab-5fca0e5974fe'])
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

    def test_NovaApi(self):
        component = self.device.getObjByPath('components/service-nova-api-10.87.209.165-RegionOne')
        self.assertEquals(component.title, 'nova-api@10.87.209.165 (RegionOne)')
        self.assertEquals(component.binary, 'nova-api')
        self.assertEquals(component.enabled, None)
        self.assertEquals(component.operStatus, None)
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-10.87.209.165')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'region-RegionOne')

    def test_NovaService(self):
        component = self.device.getObjByPath('components/service-nova-conductor-osi-p-internal')
        self.assertEquals(component.title, 'nova-conductor@osi-p (internal)')
        self.assertEquals(component.binary, 'nova-conductor')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-osi-p')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/service-nova-scheduler-osi-p-internal')
        self.assertEquals(component.title, 'nova-scheduler@osi-p (internal)')
        self.assertEquals(component.binary, 'nova-scheduler')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-osi-p')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/service-nova-consoleauth-osi-p-internal')
        self.assertEquals(component.title, 'nova-consoleauth@osi-p (internal)')
        self.assertEquals(component.binary, 'nova-consoleauth')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-osi-p')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-internal')

        component = self.device.getObjByPath('components/service-nova-compute-osi-p-nova')
        self.assertEquals(component.title, 'nova-compute@osi-p (nova)')
        self.assertEquals(component.binary, 'nova-compute')
        self.assertEquals(component.enabled, True)
        self.assertEquals(component.operStatus, 'UP')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.hostedOn())
        self.assertEquals(component.hostedOn().id, 'host-osi-p')
        self.assertIsNotNone(component.orgComponent())
        self.assertEquals(component.orgComponent().id, 'zone-nova')

    def test_Pool(self):
        component = self.device.getObjByPath('components/pool-osi-p_lvm_lvm')
        self.assertEquals(component.title, 'osi-p@lvm#lvm')
        self.assertEquals(component.allocated_capacity, '')
        self.assertEquals(component.driver_version, '3.0.0')
        self.assertEquals(component.free_capacity, '19.57 GB')
        self.assertEquals(component.location, 'LVMVolumeDriver:osi-p:cinder-volumes:thin:0')
        self.assertEquals(component.qos_support, 'False')
        self.assertEquals(component.reserved_percentage, '0%')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.storage_protocol, 'iSCSI')
        self.assertEquals(component.total_capacity, '19.57 GB')
        self.assertEquals(component.vendor_name, 'Open Source')
        self.assertEquals(component.volume_backend, '0')
        self.assertIsNone(component.orgComponent())

    def test_Port(self):
        component = self.device.getObjByPath('components/port-486e57cb-2ba3-4c4f-acb8-a21ea7739f03')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:router_interface')
        self.assertEquals(component.fixed_ip_list, '10.0.0.1')
        self.assertEquals(component.mac_address, 'FA:16:3E:92:D3:AB')
        self.assertEquals(component.portId, '486e57cb-2ba3-4c4f-acb8-a21ea7739f03')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'ovs')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-f82afbca-d429-4dc7-b3c0-3ead28855f2e')

        component = self.device.getObjByPath('components/port-507e8f3e-426f-40fb-8abf-f342f724a077')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:floatingip')
        self.assertEquals(component.fixed_ip_list, '172.24.4.5')
        self.assertEquals(component.mac_address, 'FA:16:3E:56:AE:85')
        self.assertEquals(component.portId, '507e8f3e-426f-40fb-8abf-f342f724a077')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'N/A')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'unbound')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-0ccbb5ec-9737-4107-96ab-5fca0e5974fe')

        component = self.device.getObjByPath('components/port-66297e0e-5f7f-4be2-9708-f8d6a8540574')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:floatingip')
        self.assertEquals(component.fixed_ip_list, '172.24.4.4')
        self.assertEquals(component.mac_address, 'FA:16:3E:B5:50:E9')
        self.assertEquals(component.portId, '66297e0e-5f7f-4be2-9708-f8d6a8540574')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'N/A')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'unbound')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-0ccbb5ec-9737-4107-96ab-5fca0e5974fe')

        component = self.device.getObjByPath('components/port-6ccfce1e-e37a-42db-9a94-65f50ec18060')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'compute:nova')
        self.assertEquals(component.fixed_ip_list, '10.0.0.4')
        self.assertEquals(component.mac_address, 'FA:16:3E:E6:D7:3B')
        self.assertEquals(component.portId, '6ccfce1e-e37a-42db-9a94-65f50ec18060')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'ovs')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), ['floatingip-d20b1cb0-4b52-4110-a784-cc73c913551e'])
        self.assertIsNotNone(component.instance())
        self.assertEquals(component.instance().id, 'server-b116be08-dfd0-4ef8-b58b-8ea46e1ffd87')
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-f82afbca-d429-4dc7-b3c0-3ead28855f2e')

        component = self.device.getObjByPath('components/port-c0961651-9946-4ef3-8a12-289e8f9d390a')
        self.assertEquals(component.title, 'junk')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, '')
        self.assertEquals(component.fixed_ip_list, '10.0.0.6')
        self.assertEquals(component.mac_address, 'FA:16:3E:4F:BC:2D')
        self.assertEquals(component.portId, 'c0961651-9946-4ef3-8a12-289e8f9d390a')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'DOWN')
        self.assertEquals(component.title, 'junk')
        self.assertEquals(component.vif_type, 'unbound')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-f82afbca-d429-4dc7-b3c0-3ead28855f2e')

        component = self.device.getObjByPath('components/port-cbdde5df-9e03-4f7d-97df-152763870f0e')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:dhcp')
        self.assertEquals(component.fixed_ip_list, '10.0.0.2')
        self.assertEquals(component.mac_address, 'FA:16:3E:1A:A2:FE')
        self.assertEquals(component.portId, 'cbdde5df-9e03-4f7d-97df-152763870f0e')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'ovs')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-f82afbca-d429-4dc7-b3c0-3ead28855f2e')

        component = self.device.getObjByPath('components/port-cc513990-11ce-4278-8821-da30227da290')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:router_gateway')
        self.assertEquals(component.fixed_ip_list, '172.24.4.8')
        self.assertEquals(component.mac_address, 'FA:16:3E:B4:6D:9B')
        self.assertEquals(component.portId, 'cc513990-11ce-4278-8821-da30227da290')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'ovs')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-0ccbb5ec-9737-4107-96ab-5fca0e5974fe')

        component = self.device.getObjByPath('components/port-dfe1738e-265a-4815-ac6f-5f4bfa81b642')
        self.assertEquals(component.title, '')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.device_owner, 'network:floatingip')
        self.assertEquals(component.fixed_ip_list, '172.24.4.6')
        self.assertEquals(component.mac_address, 'FA:16:3E:9B:97:49')
        self.assertEquals(component.portId, 'dfe1738e-265a-4815-ac6f-5f4bfa81b642')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.status, 'N/A')
        self.assertEquals(component.title, '')
        self.assertEquals(component.vif_type, 'unbound')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-0ccbb5ec-9737-4107-96ab-5fca0e5974fe')

    def test_Quota(self):
        component = self.device.getObjByPath('components/quota-313da8e3ab19478e82be9c50e6b1a04b')
        self.assertEquals(component.title, '')
        self.assertEquals(component.backup_bytes, 1000)
        self.assertEquals(component.backups, 10)
        self.assertEquals(component.bytes, 1000)
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.snapshots, 10)
        self.assertEquals(component.tenant_name, 'admin')
        self.assertEquals(component.volumes, 10)

        component = self.device.getObjByPath('components/quota-9afe0a3dc0414bff8c69a4f3474fafba')
        self.assertEquals(component.title, '')
        self.assertEquals(component.backup_bytes, 1000)
        self.assertEquals(component.backups, 10)
        self.assertEquals(component.bytes, 1000)
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.snapshots, 10)
        self.assertEquals(component.tenant_name, 'services')
        self.assertEquals(component.volumes, 10)

        component = self.device.getObjByPath('components/quota-d6a14c911aed48cfa9edc383ff85587f')
        self.assertEquals(component.title, '')
        self.assertEquals(component.backup_bytes, 1000)
        self.assertEquals(component.backups, 10)
        self.assertEquals(component.bytes, 1000)
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.snapshots, 10)
        self.assertEquals(component.tenant_name, 'demo')
        self.assertEquals(component.volumes, 10)

    def test_Region(self):
        component = self.device.getObjByPath('components/region-RegionOne')
        self.assertEquals(component.title, 'RegionOne')
        self.assertEquals(component.resourceId, None)
        self.assertIsNotNone(component.childOrgs())
        self.assertEquals(sorted([x.id for x in component.childOrgs()]), ['zone-internal', 'zone-nova'])
        self.assertIsNotNone(component.hosts())
        self.assertEquals(sorted([x.id for x in component.hosts()]), ['host-10.87.209.165'])

    def test_Router(self):
        component = self.device.getObjByPath('components/router-3dfb6205-861c-416c-ac3d-81912abc0335')
        self.assertEquals(component.title, 'router1')
        self.assertEquals(component.admin_state_up, 'True')
        self.assertEquals(component.gateways, ['172.24.4.8'])
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.routerId, '3dfb6205-861c-416c-ac3d-81912abc0335')
        self.assertEquals(component.routes, [])
        self.assertEquals(component.status, 'ACTIVE')
        self.assertEquals(component.title, 'router1')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), ['floatingip-d20b1cb0-4b52-4110-a784-cc73c913551e'])
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-0ccbb5ec-9737-4107-96ab-5fca0e5974fe')
        self.assertIsNotNone(component.neutronAgents())
        self.assertEquals(sorted([x.id for x in component.neutronAgents()]), ['agent-d5dc68ba-9dcc-45cd-b4a7-95a4ba39e68c'])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), ['port-486e57cb-2ba3-4c4f-acb8-a21ea7739f03'])

    def test_Subnet(self):
        component = self.device.getObjByPath('components/subnet-0e56f3ac-2289-4422-b3a8-e5a930dcec47')
        self.assertEquals(component.title, 'public_subnet')
        self.assertEquals(component.cidr, '172.24.4.0/24')
        self.assertEquals(component.dns_nameservers, [])
        self.assertEquals(component.gateway_ip, '172.24.4.1')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.subnetId, '0e56f3ac-2289-4422-b3a8-e5a930dcec47')
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-0ccbb5ec-9737-4107-96ab-5fca0e5974fe')
        self.assertIsNotNone(component.neutronAgents())
        self.assertEquals(sorted([x.id for x in component.neutronAgents()]), ['agent-5b14f0a0-1856-416e-8513-b343abb1379a', 'agent-d5dc68ba-9dcc-45cd-b4a7-95a4ba39e68c'])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), ['port-507e8f3e-426f-40fb-8abf-f342f724a077', 'port-66297e0e-5f7f-4be2-9708-f8d6a8540574', 'port-cc513990-11ce-4278-8821-da30227da290', 'port-dfe1738e-265a-4815-ac6f-5f4bfa81b642'])
        self.assertIsNotNone(component.routers())
        self.assertEquals(sorted([x.id for x in component.routers()]), ['router-3dfb6205-861c-416c-ac3d-81912abc0335'])

        component = self.device.getObjByPath('components/subnet-25fca2dd-953a-4663-a640-10e0f04d9543')
        self.assertEquals(component.title, 'private_subnet')
        self.assertEquals(component.cidr, '10.0.0.0/24')
        self.assertEquals(component.dns_nameservers, [])
        self.assertEquals(component.gateway_ip, '10.0.0.1')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.subnetId, '25fca2dd-953a-4663-a640-10e0f04d9543')
        self.assertIsNotNone(component.network())
        self.assertEquals(component.network().id, 'network-f82afbca-d429-4dc7-b3c0-3ead28855f2e')
        self.assertIsNotNone(component.neutronAgents())
        self.assertEquals(sorted([x.id for x in component.neutronAgents()]), ['agent-5b14f0a0-1856-416e-8513-b343abb1379a'])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), ['port-486e57cb-2ba3-4c4f-acb8-a21ea7739f03', 'port-6ccfce1e-e37a-42db-9a94-65f50ec18060', 'port-c0961651-9946-4ef3-8a12-289e8f9d390a', 'port-cbdde5df-9e03-4f7d-97df-152763870f0e'])
        self.assertIsNotNone(component.routers())
        self.assertEquals(sorted([x.id for x in component.routers()]), ['router-3dfb6205-861c-416c-ac3d-81912abc0335'])

    def test_Tenant(self):
        component = self.device.getObjByPath('components/tenant-313da8e3ab19478e82be9c50e6b1a04b')
        self.assertEquals(component.title, 'admin')
        self.assertEquals(component.description, 'admin tenant')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.tenantId, '313da8e3ab19478e82be9c50e6b1a04b')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), ['floatingip-733d3d80-3a29-4035-a333-577f1b60267c', 'floatingip-f18c2356-6373-4d94-b27c-aeff9532cbdb'])
        self.assertIsNotNone(component.instances())
        self.assertEquals(sorted([x.id for x in component.instances()]), ['server-29132ff8-5048-4c63-a4c7-ba56c13d0895', 'server-4170a29a-4ed6-4391-babc-a82982d73dbe'])
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), ['network-0ccbb5ec-9737-4107-96ab-5fca0e5974fe'])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), ['port-c0961651-9946-4ef3-8a12-289e8f9d390a'])
        self.assertIsNotNone(component.quota())
        self.assertEquals(component.quota().id, 'quota-313da8e3ab19478e82be9c50e6b1a04b')
        self.assertIsNotNone(component.routers())
        self.assertEquals(sorted([x.id for x in component.routers()]), [])
        self.assertIsNotNone(component.subnets())
        self.assertEquals(sorted([x.id for x in component.subnets()]), ['subnet-0e56f3ac-2289-4422-b3a8-e5a930dcec47'])

        component = self.device.getObjByPath('components/tenant-9afe0a3dc0414bff8c69a4f3474fafba')
        self.assertEquals(component.title, 'services')
        self.assertEquals(component.description, 'Tenant for the openstack services')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.tenantId, '9afe0a3dc0414bff8c69a4f3474fafba')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), [])
        self.assertIsNotNone(component.instances())
        self.assertEquals(sorted([x.id for x in component.instances()]), [])
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), [])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), [])
        self.assertIsNotNone(component.quota())
        self.assertEquals(component.quota().id, 'quota-9afe0a3dc0414bff8c69a4f3474fafba')
        self.assertIsNotNone(component.routers())
        self.assertEquals(sorted([x.id for x in component.routers()]), [])
        self.assertIsNotNone(component.subnets())
        self.assertEquals(sorted([x.id for x in component.subnets()]), [])

        component = self.device.getObjByPath('components/tenant-d6a14c911aed48cfa9edc383ff85587f')
        self.assertEquals(component.title, 'demo')
        self.assertEquals(component.description, 'default tenant')
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.tenantId, 'd6a14c911aed48cfa9edc383ff85587f')
        self.assertIsNotNone(component.floatingIps())
        self.assertEquals(sorted([x.id for x in component.floatingIps()]), ['floatingip-d20b1cb0-4b52-4110-a784-cc73c913551e'])
        self.assertIsNotNone(component.instances())
        self.assertEquals(sorted([x.id for x in component.instances()]), ['server-b116be08-dfd0-4ef8-b58b-8ea46e1ffd87'])
        self.assertIsNotNone(component.networks())
        self.assertEquals(sorted([x.id for x in component.networks()]), ['network-f82afbca-d429-4dc7-b3c0-3ead28855f2e'])
        self.assertIsNotNone(component.ports())
        self.assertEquals(sorted([x.id for x in component.ports()]), ['port-486e57cb-2ba3-4c4f-acb8-a21ea7739f03', 'port-6ccfce1e-e37a-42db-9a94-65f50ec18060', 'port-cbdde5df-9e03-4f7d-97df-152763870f0e'])
        self.assertIsNotNone(component.quota())
        self.assertEquals(component.quota().id, 'quota-d6a14c911aed48cfa9edc383ff85587f')
        self.assertIsNotNone(component.routers())
        self.assertEquals(sorted([x.id for x in component.routers()]), ['router-3dfb6205-861c-416c-ac3d-81912abc0335'])
        self.assertIsNotNone(component.subnets())
        self.assertEquals(sorted([x.id for x in component.subnets()]), ['subnet-25fca2dd-953a-4663-a640-10e0f04d9543'])

    def test_VolType(self):
        component = self.device.getObjByPath('components/volType-45bbf67b-c222-4bc6-a3a1-97804d9b1d53')
        self.assertEquals(component.title, 'iscsi')
        self.assertEquals(component.resourceId, None)

    def test_Volume(self):
        component = self.device.getObjByPath('components/volume-285fa789-ab57-4bd7-9a61-6b26684b4eb6')
        self.assertEquals(component.title, 'blueVolume')
        self.assertEquals(component.avzone, 'nova')
        self.assertEquals(component.bootable, 'FALSE')
        self.assertEquals(component.created_at, '2018-11-12 16:14:15.000000')
        self.assertEquals(component.backend, None)
        self.assertEquals(component.resourceId, None)
        self.assertEquals(component.size, 100)
        self.assertEquals(component.sourceVolumeId, None)
        self.assertEquals(component.status, 'ERROR')
        self.assertEquals(component.volumeId, '285fa789-ab57-4bd7-9a61-6b26684b4eb6')
        self.assertIsNone(component.instance())
        self.assertIsNotNone(component.tenant())
        self.assertEquals(component.tenant().id, 'tenant-313da8e3ab19478e82be9c50e6b1a04b')
        self.assertIsNotNone(component.volSnapshots())
        self.assertEquals(sorted([x.id for x in component.volSnapshots()]), [])
        self.assertIsNotNone(component.volType())
        self.assertEquals(component.volType().id, 'volType-45bbf67b-c222-4bc6-a3a1-97804d9b1d53')


def test_suite():
    from unittest import TestSuite, makeSuite
    suite = TestSuite()
    suite.addTest(makeSuite(TestModelOSIPAdmin))
    return suite


if __name__ == "__main__":
    from zope.testrunner.runner import Runner
    runner = Runner(found_suites=[test_suite()])
    runner.run()
